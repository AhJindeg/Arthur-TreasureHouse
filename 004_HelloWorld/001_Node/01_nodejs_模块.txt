一、Node.js

（2）运行模式

   脚本模式
      node   拖拽脚本文件   回车
   交互模式
      node   回车   进入交互模式
      两次ctrl+c   退出交互模式

（3）特点
   是单线程运行逻辑，适合做I/O操作为主应用，支持数万个并发连接，例如：基于社交网络的大规模WEB应用
   不适合做CPU密集型的应用

二、全局对象

（1）global

   检测一个变量或者函数是否为全局的
   交互模式属于全局作用域，变量和函数都是全局，可以通过global访问
   脚本文件中不属于全局作用域，变量和函数都是局部的

   JS的全局globa叫做window


（2）console
   console.log(1); // 打印/输出日志
   console.info(2); // 打印消息
   console.warn(3); // 打印警告
   console.error(4); // 打印错误
   console.time()   // 开始计时      console.timeEnd()   // 结束计时
      开始计时和结束计时的值要保持一致


（3）process
   进程对象
   启动任何一个软件都是代表对应的进程
   process.arch   查看当前CPU框架
   process.platform   查看操作系统
   process.version   查看当前nodejs的版本号
   process.pid   查看当前进程的编号
   process.kill()   结束指定编号的进程

（4）Buffer
   缓冲器、缓冲区，是内存中一块临时存储数据的区域
   var buf = Buffer.alloc(5,'abcde')   // 创建Buffer，分别空间大小为5个字节，并存储数据，每个汉字占3个字节
   buf.toString()   // 将buffer转为字符串

三、模块
   每个文件代表一个模块，每个模块表示一个功能体

   require()：是一个函数，用于引入其他的模块，得到对方导出的对象
   module.exports={}：当前模块导出的对象，默认是一个空对象，如果要导出哪些内容只需要放入到这个对象

   __dirname   获取当前模块的绝对路
   __filename   获取当前模块的绝对路径 + 模块名称

（2）模块分类
   分为自定义模块、核心模块、第三方模块

   以路径开头
      文件模块：require('./circle.js') 用于引入自定义模块
      目录模块：require('./02-tao') 首先会找寻package.json文件中main对应的文件，如果没有的话会自动寻找index.js

   不以路径开头
      文件模块：require('querystring')   用于引入官方提供核心模块
      目录文件：require('tao') 首先会到当前目录下的no_modules目录中寻找tao目录模块，如果当前找不到会一直往上一级的node_modules目录中寻找用于引入第三方模块

四、包和npm
   CommonJS：是一种规范，制定了Node.js的模块规范
   包：指的是第三方模块，是目录模块的形式
   npm：是一个第三方模块，用来管理包的工具模块，在Node.js安装的时候会附带安装
         npm -v   查看版本号
         npmjs.com   包网

（1）切换命令行的路径
   cd   文件路径   回车
   如果有盘符的变化，再添加
         盘符名称：   回车
   在要进入的目录下的空白区域，按住shift，单击鼠标右键，打开powershell
（2）使用npm
   npm   init   -y      初始化一个package.json文件，用于描述项目，记录下载的包
   npm install 包的名称      下载安装指定的包，将下载的包放入到node_modules目录，在package.json中记录下载这个包，同时生成package-lock.json文件，用于记录所有的包的版本号
   npm install   自动去下载安装package.json和package-lock.json中记录的包
   其它npm命令：www.npmjs.cn

五、查询字符串
   浏览器向服务器发请求，传递数据的一种方式，位于网址中问号(?)后的部分
     此类格式：kw=笔记本&price=5000
   查询字符串模块：用于操作查询字符串的工具
   parse()   将查询字符串解析为对象
   
六、URL
   统一资源定位，互联网上的任何资源(html,css,js,图像,视频...)都有对应的url
   http://www.codeboy.com:9999/products.html?ke=华硕

   协议     域名/IP地址    端口  文件在服务器的路径  查询字符串
   URL模块用来处理URL的工具，
   new URL()   将一个URL解析为对象，获取URL中的各个部分

七、定时器模块
   提供一组全局函数

（1）一次性定时器

   开启：var timer=setTimeout(回调函数，间隔时间);
      当间隔时间到了，会调用一次回调函数
   清除：clearTimeout(timer)

（2）周期性定时器
   开启：var timer=setInterval(回调函数,间隔时间);
      每隔一段时间，会调用一次回调函数
   清除：clearInterval(timer)

（3）立即执行的定时器
   var timer=setImmediate(回调函数)
   清除：cleaeImmediate(timer)
   开启：process.nextTick(回调函数)
      一旦开启无法清除
   会将回调函数放入到事假队列，当主程序执行完再去执行事件队列

八、文件系统模块(fs)
   用于操作服务器端文件
   文件包括目录形式和文件形式
   mkdirSync(目标路径)   创建目录
   
   同步和异步
   同步：在主线程中执行，会阻止后续代码的执行，是通过返回值获取结果
   异步：在一个独立的线程执行，不会组织后续的代码的执行，是通过回调函数获取结果
   
（1）查看文件状态
   statSync(文件的路径) / stat(文件的路径，回调函数)
      isFile()   查看是否为文件
	  isDirectory()   查看是否为目录
	  
（2）创建目录
   mkdirSync(目录的路径) / mkdir(目录的路径，回调函数)
   
（3）移除目录
   rmdirSync(目录的路径) / rmdir(目录的路径，回调函数)
   不允许移除有文件的目录
   
（4）读取目录
   readdirSync(目录的路径) / readdir(目录的路径，回调函数)
   读取的结果为数组
   
（5）清空写入文件
   writeFileSync(文件路径，写入的数据) / writeFile(文件的路径，写入的数据，回调函数)
   如果文件不存在，先创建文件然后写入数据
   如果文件已经存在，先清空文件中的内容然后写入数据
   
（6）追加写入文件
   appendFileSync(文件路径，写入数据) / appendFile(文件路径，写入数据，回调函数)
   如果文件不存在，先创建文件然后写入数据
   如果文件存在，会在文件的末尾追加写入数据
   
（7）读取文件
   readFileSync(文件路径) / readFile(文件的路径，回调函数)
   
（8）删除文件
   unlinkSync(文件的路径) / unlink(文件的路径，回调函数)
   
（9）检测文件/目录是否存在
   existsSync(文件的路径)   存在->true   不存在->false
   
（10）拷贝文件
   copyFileSync(源文件的路径，目标文件的路径) / copyFileSync(源文件的路径，目标文件的路径，回调函数)


九、文件流
   createReadStream()   创建可读取的流
   createWriteStream()   创建可写入的流
   on('事件名称','回调函数')   一旦触发事件，会自动调用回调函数，事件名称是固定的
   pipe()   管道，可以将读取的流添加到写入的流
 