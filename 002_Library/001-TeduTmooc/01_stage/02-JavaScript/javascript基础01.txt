学习一门编程语言的基本步骤
（1）了解背景知识：历史、现状、特点、应用场景
（2）搭建开发环境，编写hello world
（3）变量和常量
（4）数据类型
（5）运算符
（6）逻辑结构
（7）通用小程序
（8）函数和对象
（9）第三方的库和框架
（10）个人项目

一、概述
 1. 历史
   1995年，JS最早出现在Netscape的浏览器中
   1996年，IE3中也可以出现JS，也被称为JScript
   1997年，制定JS标准规范，ECMAScript
   2009年，JS开始向服务器端发展，出现Node.js
 2. 现状
   既可以运行在客户端浏览器，也可以运行在服务器端
 3. 特点
      解释型语言，编译一行执行一行
      弱类型语言
      基于对象
      跨平台
 4. 应用场景
   开发前端的交互效果，服务器端开发，例如：访问数据库、其他服务器的调用...

二、搭建开发环境
 1. 浏览器端
   浏览器中有自带的JS解释器
   chrome / edge / safari / 火狐 / 欧朋
 2. 服务器端
   Node.js
 3. 运行js

   浏览器下运行
      新建01.js和01.html两个文件，把js嵌入到html中，用浏览器运行html即可
      <script src="   "> </srcipt>

   Node.js下运行
      命令行下
      node   拖拽js文件   回车

三、JS语法规范

   区分大小写
   每行结束的分号可以省略
   单行注释 //   多行注释/* */
   

四、变量

 1. 声明
   用于存储数据的容器
   声明变量：
      var a=1;   // 每次声明一个
      var b=2,c=3;   // 多次声明
      在内存中开辟一块空间，把空间命名为a，然后把值保存到这个空间

 2. 命名规则
   变量的名称可以由字母、数字、下划线、美元符号($)组成，不能以数字作为开头，不能使用关键字
   user_name(下划线命名)   userName(驼峰命名)

 3. 变量赋值
   声明变量未赋值，则为undefiined(未定义，代表空值)，变量可以多次赋值，并且赋不同类型的值，这是弱类型语言的特点

五、常量

   常量也是用来存储数据，声明的时候必须赋值，不允许重新赋值
   声明常量   const a=1;

六、数据类型

 1. 原始类型
   数值型、字符串型、布尔型、未定义型、空

      数值型
      整型
      8进制以0开头，16进制以0x开头x不区分大小写
      浮点型
      小数点可以移动

      字符串型
      被引号包含的数据就是字符串型，不区分单双引号
      查看任意一个字符的Unicode码
      't'.charCodeAt()

      布尔型
      true false
      
      未定义型
      undefined
      声明了变量未赋值则为 undefined，代表空值

      NaN：Not a Number  不是一个数字，这个值是转数值失败的结果，NaN和任何数值执行加减乘除结果还是NaN

      空
      只有一个值null，和引用类型的数据一起使用

七、类型转换

（1）typeof   用于检测数据类型
      'number' / 'string' / 'boolean' / 'undefined' / 'object'

（2）数据类型的转换

   ①隐式转换
      运算过程中自动产生的转换
      数字+字符串（字符串）
      数字+布尔值（数字，布尔会转换为数字）
      字符串+布尔值（字符串，布尔会转换为字符串）

      隐式转换为数值自动的调用函数Number

   ②强制转换

      强制转换为数值
      Number()
      Number('2')   // 2
      Number('2a')   // NaN
      Number(true)   // 1
      Number(false)   // 0
      Number(undefined)   // NaN
      Number(null)   // 0

      强制转换为整型
      parseInt()
      用于将字符串和小数强制转换为整型，其他类型结果为NaN
      parseInt(3.19)   // 3
      parseInt('2.15')   // 2
      parseInt('6.18a')   // 6
      parseInt('a6.18')   // NaN
      将字符串转为数值的时候，如果开头是非数字返回NaN，否则返回开头的整数部分

      强制转换为浮点型
      parseFloat()
      用于将字符串转为浮点型
      parseFloat('3a');   // 3
      parseFloat('3.14');   // 3.14
      parseFloat('a3.14');   // NaN

      将数值和布尔值强制转换为字符串
      toString()
      

八、运算符

   ③运算符
      表达式：由数据或者由运算符连接的数据组成的格式称作表达式
      运算符分为算术运算符、比较运算符、逻辑运算符、位运算符、赋值运算符、三目运算符

      算术运算符
      +   -   *   /   ++   --
      自增涉及到赋值时有区别，++在前先计算，++在后后计算
      自增会隐式转换为数值

      比较运算符
      >   <   >=   <=   ==   !=   ===   !==
      ==   比较值是否相同，可能会产生隐式转换
      ===   先比较类型，再比较值，只有两个都相同才是true
      比较中，比较的是首个字符的Unicode码
      NaN和任何值比较结果都是false

     逻辑运算符
     &&(与,都为真)   ||(或,有一为真)   ！(非,取反)
     短路逻辑
        &&：第一个为假就不执行第二个
        ||：第一个为真就不执行第二个


      位运算符
      模拟计算机底层运算，先把数字转成2进制再进行运算，运算完再把结果转成10进制
      &   按位与，上下两位比较，两者都是1结果为1，否则是0
      |   按位或，上下两位比较，含有1结果是1，否则是0
      ^   按位异或，上下两位比较，不同的是1，否则是0
      >>   按位右移，删除二进制下最后的位数，每移动一位是原来的一半，如果是小数取整
      <<   按位左移，在末尾补0，每移动一位是原来的2倍

      赋值运算符
      =   +=   -=   *=   /=   %=   ...
      赋值      先计算再赋值

      三目运算符
      一目运算符：由一个运算符连接的一个操作数据或者表达式   ++   --   ！
      二目运算符：由一个运算符连接的两个操作数据或者表达式
      三目运算符：由两个运算符连接的三个操作数据或者表达式
         条件表达式   ?   表达式1    :   表达式2
         如果条件表达式为true，执行表达式1
         如果条件表达式为false，执行表达式2



2. 浏览器端函数

   alert()   弹出警示框
   prompt()   弹出警示框（输入），需要变量保存用户输入的值，类型字符串型，如果点击取消结果是null

   程序 = 数据 + 算法
   程序的执行方式：顺序执行、选择执行、循环执行

九、循环

3. 流程控制
（1）if 语句
   if(){};
   以下情况隐式转换为布尔型结果是false：
   0   NaN   '空字符串'   undefined   null

（2）if...else...语句
   if(){}else{};

（3）switch-case语句
   是一种特殊的多项分支语句，只能进行全等于的比较
   switch(表达式1){
      case 值1: 
         语句块 1
         break;
      default:   // 表达式和每个case后的值比较都是false
         语句块;
   };

4. 循环
   循环：一遍又一遍执行相同或者相似的代码
   循环的两个要素：
      循环条件：控制循环
   
   while(循环条件){循环体};

   break
   在循环体中使用
   用于跳出循环

   do-while循环
   do{}while();

   for循环
   for(初始值;循环条件;增量){
      循环体;
   };

   continue 和 break
   break   结束循环，不再执行任何循环中的代码
   continue   跳过本次循环


5. 循环嵌套
   在一个循环体的内部又出现的其他的循环
   任意两个循环之间都是可以相互嵌套
   

十、函数

1. 函数
   Number() / parselnt() / parseFloat() / alert() / prompt()
   函数分为系统函数和自定义函数
   函数：是一个功能体，提供若干个数据，返回处理结果，用于封装重复执行的代码

   创建普通函数
   function 函数名称(){
      函数体 --- 封装的要重复执行的代码
   };
   调用：函数名称()

   创建带有参数的函数
   function 函数名称(参数列表){
      函数体
   };
   调用：函数名称(参数列表);
   创建函数时的参数为形参，调用函数时的参数称为实参，实参会赋值给形参，实参和形参的数量可以不匹配，如果形参未被赋值则为undefined。


   创建带有返回值的函数
   function 函数名称(参数列表){
      函数体
      renturn 值;
   };
   调用：函数名称(参数列表)
      return 用于返回函数调用的结果，如果函数中没有写return或者return后不加任何值则返回undefined，一旦return执行就会结束函数的执行。

   对比return和break
   return 用于函数中，结束函数的执行
   break 用于循环和switch-case，结束循环或者switch-case的执行

十一、作用域

1. 变量的作用域
   全局变量：在全局作用域下声明的变量就是全局变量，可以在任意的作用域访问到
   局部变量：在函数作用域下声明的变量就是局部变量，只能在当前的函数作用域下访问到
   全局作用域：函数以外的作用域
   函数作用域：函数以内的作用域
   函数不加var声明的变量是全局变量

2. 变量提升
   在程序执行之前，会将var声明的变量提升到所在作用域的最前边，只是提升声明，赋值不提升

3. 函数的作用域
   全局函数：在全局作用域下创建的函数，可以在任意作用域下访问到
   局部函数：在函数作用域下创建的函数，只能在当前函数作用域下访问到
   作用域链：多个作用域嵌套构成的作用域结构，在寻找变量的时候，先到当前的作用域下寻找，如果当前没有会不断往上一级作用域寻找。
   函数提升：程序执行前，会将函数提升到所在作用域的最前边，是整体提升

4. 递归
   在函数的内部调用自身，本身是一个死循环，造成内存泄漏
   内存泄漏：内存中的空间被占满，无法保存新的数据。

   如何使用递归：要求边界条件、结合着return

  
5. 匿名函数与函数
   function ( ){ };

（1）创建函数
   函数声明：function fn(){};   创建函数
   函数表达式：var fun = function(){};   变量名称就是函数名称
   对比函数名称()和函数名称
      函数名称()   调用函数，执行函数体中的代码，得到返回结果
      函数名称   是一个变量，变量中保存了一个函数
   对比函数声明和函数表达式的区别
      函数名称创建的函数存在函数整体提升，可以先写调用再写创建
      函数表达式创建的函数只是存在变量声明的提升，必须先写创建再写调用

（2）匿名函数自调用
   (function(){};)();
   为了防止全局污染

（3）回调函数
   将函数作为参数传递
   function tao(madai){ madai(); }
   function dong(){}
   tao(dong) // 函数dong作为参数传递就是回调函数
   tao(function(){}) // 匿名函数作为参数传递也是回调函数

6. 系统函数
   isNaN()   检测一个值是否为NaN，会隐式转换为数值，是NaN -> true   不是->false
   eval()   执行字符串表达式


















