1.三目运算符
	需要三个操作数组成的表达式
	
	条件?表达式1:表达式2

	执行流程：先判断条件，如果结果为true，则执行表达式1，否则执行表达式2

	练习1：在弹出框中输入考试成绩，如果成绩大于等于60，则在控制台输出“及格”，否则输出“不及格”
	var score=prompt('请输入考试成绩：');
	var result=score>=60?'及格':'不及格';
	console.log(result);

	练习2：在弹出框中输入考试成绩，如果成绩>=90则在控制台输出“优秀”，如果成绩>=80，则在控制台输出“良好”，如果成绩>=60，则在控制台输出“及格”，否则输出“不及格”

2.条件判断
	1.if结构
		if(条件){
			代码块;
		}
		
		如果条件的结果为true则执行代码块
	
	2.if-else结构
		if(条件){
			代码块1;
		}else{
			代码块2;
		}
		
		如果条件为true，则执行代码块1，否则执行代码块2
		
	3.if-else if-else
		if(条件1){
			代码块1;
		}else if(条件2){
			代码块2;
		}else if(条件3){
			代码块3;
		}else{
			代码块n;
		}
		如果条件1为true，则执行代码块1
		否则如果(条件1为false但条件2为true)，则执行代码块2
		否则如果(条件1、条件2都为false，条件3为true)则执行代码块3
		否则如果(以上条件都为false)，则执行代码块n
	练习：
		在弹出框中输入数字，并在控制台输出对应的大写汉字
			1 -- 壹
			2 -- 贰
			3 -- 叁
			...
	
	4.switch-case
		用来做等值判断，而且是全等判断
		switch(变量|表达式){
			case 值1:
				代码块1;
			case 值2:
				代码块2;
			case 值3:
				代码块3
			default:
				代码块n;
		}

		当变量或者表达式的结果全等于值1时，程序从代码块1开始执行
		当变量或者表达式的结果全等于值2时，程序从代码块2开始执行
		...
		如果以上值都不满足，则从代码块n执行
		
		如果不需要继续向下执行，则可以加break终止

	练习：
		三次弹框，分别输入年、月、日，判断这一天是该年的第几天，并在控制台给出提示
3.函数
	函数--功能
	是一段预定义好的，并可以被反复执行的代码块
	预定义：提前定义好，并非马上执行
	1.使用过的函数
		alert()
		prompt()
		Number()
		parseInt()
		...
	2.自定义函数的声明和调用
		1.普通函数
			声明：
				function 函数名(){
					函数体;
				}
			
			调用：
				函数名();
			
			声明一个名为calculate的函数，在函数体中声明两个变量并赋值数字，在控制台输出这两个数字的和

			function calculate(){
				var a=1,b=2;
				console.log(a+b);
			}
			calculate();
		
		2.带参函数的声明和调用
			声明：
				function 函数名(参数列表){
					函数体;
				}
				
				参数列表：由逗号隔开的多个形参
				形参：形式上参与运算的数据，本质就是变量，用于接收外部的数据
			调用：
				函数名(实参);

				实参：实际上参与运算的数据，传参的过程本质就是给变量赋值

			给形参设置默认值：
				function 函数名(形参1=值,形参2=值){
					函数体;
				}
		3.带返回值的函数
			声明：
				function 函数名(){
					函数体;
					return 值;
				}
			
			调用：
				函数名();
			
			返回值：函数运行完以后的结果，允许用变量接收
				var 变量=函数名();
			
		练习：声明一个计算打折(95折)的函数，再声明一个计算在打折的基础上满减(满100-5)的函数，并将最终要支付的钱输出在控制台
		
		4.匿名函数
			function(){
				...
			}
			
			使用：
				1.给变量赋值
					var 变量=function(){...}

					调用：变量();
				
				2.绑定给事件
					元素.事件=function(){...}
				
				3.匿名函数自调
					(function(){
						...
					})();

					形成函数作用域，防止污染全局
4.作用域
	变量和函数的可访问范围

	全局作用域：直接在script标签中用var关键词声明的变量和function声明的函数，在js的任何位置都有效
	
	函数作用域：在function函数体内用var关键词声明的变量和function声明的函数，只在该函数内有效(形参也是局部变量)

	注意：
		1.如果全局变量和局部变量冲突时，优先使用局部变量
		2.声明变量时如果省略关键，则无论在什么位置，都是全局变量(不推荐！！！)

	

	





