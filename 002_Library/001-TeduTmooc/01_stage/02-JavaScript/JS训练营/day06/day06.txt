1.数组API
	API：Application Programming Interface
				应用       程序        接口
	
	以下方法不会改变原数组：
		1.数组.toString() 将数组中的元素拼接为字符串，逗号隔开
		2.数组.join('字符') 将数组元素按照指定字符拼接为字符串，如果未指定字符，则默认以逗号隔开
		3.数组.concat(arr1,arr2,...) 将多个数组中的元素拼接为一个新数组
		4.数组.slice(start,end) 截取数组中的元素，组成新数组并返回；start是开始下标，end是结束下标，不包含end本身；如果end为空则截取到最后；如果下标为负，则表示倒数，倒数第一个的下标为-1

	以下方法会改变原数组：
		1.数组.splice(start,count,v1,v2,...) 删除数组中的元素，并将删除的元素组成新数组返回；start为开始下标，count为删除的元素个数，v1,v2,...为删除后插入的元素，如果count为空，则删除到最后；如果下标为负，则表示倒数，倒数第一个的下标为-1

		练习：创建数组，包含a~g，每个字母是一个元素，删除de，替换g为z，在下标为1的位置插入m
	
		2.数组.reverse() 翻转数组中的元素
		3.数组.sort(回调函数) 对数组中的元素进行排序，如果没有传递回调函数，则默认按照Unicode码从小到大排
			数组.sort(
				function(a,b){
					return a-b; //从小到大
				}
			);

			数组.sort(
				function(a,b){
					return b-a; //从大到小
				}
			);
		
		4.数组.push(v1,v2,...) 在数组的末尾添加元素，返回数组长度
		
		5.数组.pop() 删除数组末尾的一个元素，返回删除的元素

		6.数组.unshift(v1,v2,...) 在数组的最开始位置添加元素，返回数组长度

		7.数组.shift()  删除数组的第一个元素，返回删除的元素

2.二维数组
	数组中的每一个元素还是一个数组
	var arr=[[...],[...],[...]];
3.对象
	引用类型数据
	对象：一组属性和方法的集合
	1.自定义对象
		声明：
			var zhangsan={
				sname:'张三',
				age:21,
				sex:'男'
			};
	2.访问对象中的属性
		对象名.属性名 (推荐！)
		对象名['属性名']

		什么时候用. 什么时候用[]
			要用到变量，就用[]，其他时候用.
		
	3.方法
		var zhangsan={
			sname:'张三',
			age:21,
			sex:'男',
			intr:function(){
				console.log(`My name is ${this.sname}`);
			}
		};
	4.判断一个对象中是否存在某一个属性
		对象.hasOwnProperty('属性名')
			结果为true表示存在
			结果为false表示不存在


---------------------------------
数组.forEach(
	function(v,k,arr){
		//v中保存当前元素值
		//k中保存当前元素下标
		//arr中保存当前数组
	}
);


专门用来代替for循环遍历索引数组

for循环遍历：(格式太繁琐)
var arr=[...];
for(var i=0;i<arr.length;i++){
	//i 数组元素下标
	//数组[i] 数组元素
}
