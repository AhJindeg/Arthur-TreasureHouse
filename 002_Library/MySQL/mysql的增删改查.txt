
SQL命令的语法规范：

  一条SQL命令可以跨越多行，以英文的分号作为结束

  SQL命令不区分大小写，习惯上关键字大写，非关键字小写

  某条SQL命令出现语法错误，则此条命令及后面的所有命令都不在执行
  
  注释： 单行注释：#   多行注释：/*     */


一、数据的存储方式

   特定文件（永久保存，速度慢） / 内存（不能永久保存，速度快） / 第三方云服务器（信息存储不安全） / 数据库服务器（可永久保存，使用方便）

二、数据库是什么

   按照一定形式来组织存放数据，目的是为了方便操作数据 --- 增删改查

   数据库的发展：
    网状数据库 - 层次型数据库 - 关系型数据库 - 非关系型数据库（NoSQL）

   关系型数据库逻辑结构：
    Server（数据库服务） --- Database（数据库） --- Table（数据表） --- Row（行） --- Column（列）

   MySQL数据库
   Oracle：mysql
   马丁：mariaDB
   
   现用：Xampp

 1.myaql部署结构

   服务器端：负责存储/维护数据 --- 银行的数据库服务器
   C:/xampp/mysql/bin/mysqld.exe
   占用端口：3306

   客户端：负责连接数据库服务器，对数据进行增删改查 --- ATM机
   C:/xampp/mysql/bin/mysql.exe
   
 2.使用客户端连接服务器端
   
   mysql.exe -h127.0.0.1 -P3306 -uroot -p

    -h host IP地址/域名   127.0.0.1/localhost
    -P port 端口
    -u user 用户名   root
    -p password 密码   xampp下root的密码为空

   简写：mysql -uroot

 3.常用管理命令

   以英文的分号作为结束

   quit; 退出服务器连接

   show databases;   显示当前数据库下所有的数据库

   use 数据库名称;   进入指定的数据库

   show tables;   显示当前数据库所有的数据表

   desc 数据表名称;   描述指定的数据表都有哪些列

 4.SQL命令

     结构化查询语言，用于操作关系型数据库服务器，主要是对数据进行增删改查

   SQL命令的执行方式
    
  （1）交互模式
     客户端输入一行，点击回车，服务器就会执行一行，适用于临时性的查看数据。

  （2）脚本模式
     客户端把要执行的命令写在一个脚本文件，一次性的提交给服务器执行，适用于批量的操作数据
   
     mysql -uroot<拖拽要运行的脚本 回车

  5.常用SQL命令
    
 （1）丢弃数据库，如果存在
         drop database if exists 数据库名;

 （2）创建新的数据库
         create database 数据库名;

 （3）进入数据库
         use 数据库名;

 （4）创建数据表
         create table 数据表名(
           名 类型,
           名 类型
         );

 （5）插入数据
         insert into 表名 values();

 （6）查询数据
         select * from 表名;

课外知识
   create database if not exists 数据库名;

   use 数据库名;

   create table 表名(
   id int comment  '注释';l
   name varchar(2) comment '注释'
   );

   insert into 表名(id,name) values
   (1,'涛'),
   (2,'鹏');

   select * from 表名;

一、SQL命令

 （1）修改数据
      update 表名 set 列=' ',列=' ' where 列=' ';

 （2）删除数据
      delete from 表名 where 列=' ';

二、计算机如何存储字符

 （1）如何存储英文字符
      ASCII 对所有的英文字母及其符号进行了编码，总共有128个
      Lstin-1 对欧洲字符进行了编码，总共有256个，兼容了ASCII

 （2）如何存储中文字符
      GB2312 对6千多的汉字进行了编码，兼容ASCII
      GBK 对两万多汉字进行了编码，兼容GB2312
      BIG5 台湾繁字体编码
      Unicode 对世界上主流国家常用的语言进行了编码，分为三种存储方案 utf-8，utf-16，utf-32
 
 （3）mysql默认使用Latiin-1编码所以会出现中文乱码

 （4）解决mysql中文乱码的方法
      脚本文件另存为utf8
      客户端连接服务器端使用的编码为utf8
         set names utf8;
      服务器端创建数据，使用的储存编码为utf8
         create database 数据库名 charset=utf8;

三、列类型

   创建数据表的时候，指定列可以储存的数据类型

 1.数值型

   TB   GB   MB   KB   Byte   Bit（位）
   1byte = 8bit

 （1）tinyint   微整型   占1个字节，范围-128 - 127
 （2）smallint   小整型   占2个字节，范围-32768 - 32767
 （3）int   整型   占4个字节，范围-2147483648 - 2147483647
 （4）bigint   大整型   占8个字节
 （5）float   单精度浮点型   占4个字节，范围比int大得多，以牺牲小数点后若干位为代价，数字越大精度越低，最大值3.4e38
 （6）double   双精度浮点型   占8个字节，范围比bigint大得多，数字越大精度越低
 （7）decimal（M,D）   定点小数   小数点的位置不会发生变化，M代表总的有效位数，D代表小数点后的有效位数
 （8）boolean / bool   布尔型   只有两个值true和false，通常用于存储只有两个数值的数据
      true和false是关键字，不能加引号
      在使用的时候，布尔型会自动转换为tinyint，true转为1，false转为0；也可以直接插入1或者0

 2.日期时间型

 （1）date   日期型   ‘2021-10-02’
 （2）time   时间型   ‘15:18:30’
 （3）datetime   时间日期型   ‘2021-10-02 15:18:30’

 3.字符串型

 （1）varchar(M)   变长字符串   几乎不会产生空间浪费，数据操作速度相对慢，M的最大值65535，用于存储变化长度的数据
 （2）char(M)   定长字符串   可能会产生空间浪费，数据操作速度相对快，M的最大值255，用于存储固定长度的数据
 （3）text(M)   大型变长字符串   M的最大值2G

四、列约束

   Mysql可以对要插入的数据进行验证，只有满足条件才允许插入

 1.主键约束   ---   primary key
   声明了主键约束的列上不允许插入重复的值，一个表中只能有一个主键约束，通常加在编号列，会加快数据的查找速度，按照编号从小到大排列
   主键约束的列禁止插入null
   null 表示空，暂时无法确定的值
   null是关键字，不能加引号

 2.非空约束   ---   not null
   声明了非空约束的列上禁止插入null

 3.唯一约束   ---   unique
   声明了唯一约束的列不允许出现重复的值，允许插入null ，甚至多个unll，可能会影响数据排序

 4.默认值约束   ---   default
   可以使用default关键字来设置默认值，具体应用方式有两种
   insert into 表名 values(数据,default);   #通过default调用当前列的默认值
   insert into 表名(列名) values(数据);   #给指定的列提供了值，没有出现的列自动调用默认值

 5.检查约束   ---   check
   也称为自定义约束
   create table student(
     score tinyint check(score>=0 and score<=100)
   );
   mysql不支持检查约束，会影响数据的插入速度、
   后期可以通过JS实现验证

 6.外键约束   ---   
   声明了外键约束的列，插入的值必须要在另一个表的主键列中出现过；外键列要和对应的主键列类型要保持一致
   foreign key(外键列) references 另一个表(主键列)
   外键约束的使用是为了让两个表之间产生关联

五、自增列
      auto_increment   自动增长   如果设置了自增列，在插入数据的时候，只需要赋值为null，就会获取当前最大值然后加1插入
      自增列只能添加在整数形式的主键列上
      允许手动赋值

六、查询

 1.简单查询

（1）查询特定的列
   示例：查询出所有员工的编号和姓名
      select eid,ename from emp;
   练习：查询出所有员工的姓名、性别、生日、工资
      select ename,sex,birthday,salary from emp;

（2）查询所有的列
   示例：查询所有的员工
      select eid,ename,sex,birthday,salary,deptId from emp;
      select * from emp;

（3）给列起别名
   示例：查询出所有员工的编号和姓名，使用汉字别名
      select eid as 编号,ename as 姓名 from emp;
   练习：查询出所有员工的姓名、生日、工资，使用汉字别名
      select ename as 姓名,birthday as 生日,salary as 工资 from emp;
   练习：查询出所有员工的姓名和性别，使用一个字母作为别名
      select ename A,sex B from emp;

（4）显示不同的记录
   示例：查询出都有哪些性别的员工
      select distinct sex from emp;
   练习：查询出员工都分布在那些部门
      select distinct deptId from emp;

（5）查询时进行计算
   select 2+3+4+5;
   练习：查询所有员工的姓名及其年薪
      select ename,salary*12 from emp;
   练习：假设每个员工工资增加1000，年终奖20000，查询出所有员工的性别及其年薪使用别名
      select sex a,(salary+1000)*12+20000 as b from emp;

（6）查询的结果排序

   字符串排序，按照字符的Unicode码排列
   不加排序规则，默认按照升序排列

   示例：查询出所有的部门，结果按照编号升序排列
      select * from dept order by did asc;   #ascendant   升序的
   示例：查询出所有的部门，结果按照编号降序排列
      select * from dept order by did desc;   #descendant   降序的
   练习：查询出所有的员工，结果按照工资的降序排列
      select * from emp order by salary desc;
   练习：查询出所有的员工，结果按照年龄从大到小排列
      select * from emp order by birthday asc;
   练习：查询出所有的员工，结果按照姓名的升序排
      select * from emp order by ename asc;
   练习：查询出所有的员工，按照工资降序排列，如果相同按照姓名排列
      select * from emp order by salary desc,ename;
   练习：查询出所有员工，按照性别排列，如果性别相同按照年龄从大到小排列
      select * from emp order by sex,birthday;

（7）条件查询

      >   <   =   <=   >=   !=   is   is not   and && not in(满足其二)   or || in(满足其一)

   示例：查询出编号为5的员工
      select * from emp where eid=5;
   练习：查询出姓名为king的员工
      select * from emp where ename='king';
   练习：查询出20号部门的员工有哪些
      select * from emp where deptId=20;
   练习：查询出所有的女员工有哪些
      select * from emp where sex=0;
   练习：查询出工资在8000以上的员工有哪些
      select * from emp where salary>8000;
   练习：查询出不在20号部门的员工有哪些
      select * from emp where deptId!=20;
   练习：查询出没有明确部门的员工有哪些
      select * from emp where deptId is null;
   练习：查询出有明确部门的员工有哪些
      select * from emp where deptId is not null;
   练习：查询出工资在5000-8000之间的员工有哪些
      select * from emp where salary>=5000 and salary<=8000;
   练习：查询出工资在5000以下或者8000以上的员工有哪些
      select * from emp where salary<5000 or salary>8000;
   练习：查询1993年出生的员工有哪些
      select * from emp where birthday>='1993-01-01' and birthday<='1993-12-31';
   练习：查询出20号部门或者30部门的员工有哪些
      select * from emp where deptId=20 or deptId=30;
      select * from emp where deptId in(20,30);
   练习：查询出不在20号部门也不再30号部门的员工有哪些
      select * from emp where deptId!=20 and deptId!=30;
      select * from emp where deptId not in(20,30);

（8）模糊条件查询

      link
      %   匹配任意字符   >= 0
      _   匹配任意一个字符   =1
      以上两个匹配符必须结合like关键字使用

   示例：查询出姓名中含有字母a的员工有哪些
      select * from emp where ename like '%a%';
   练习：查询出姓名中以a结尾的员工有哪些
      select * from emp where ename like '%a';
   练习：查询出姓名中倒数第2个字符是a的员工有哪些
      select * from emp where ename like '%a_';

（9）分页查询

   查询的结果有太多数据，一次显示不完全可以做成分页查询
   需要提供两个条件：当前页码、每页的数据量
   每页开始查询的值 = (当前页码-1) * 每页的数据量
   语法结构：
      select * from emp limit 开始查询的值，每页的数量;

   练习：假设每页显示5条数据，查询出前4页每页的数据
      select * from emp limit 0,5;
      select * from emp limit 5,5;
      select * from emp limit 10,5;
      select * from emp limit 15,5;

2.复杂查询

   函数：是一个功能体，提供若干个数据，返回结果

（1）聚合查询 / 分组查询

   聚合函数：
      count()数量 / sum()总和 / avg()平均 / max()最大 / min()最小
   示例：查询出所有员工的数量
      select count(*) from emp;
   练习：通过员工的编号列查询数量
      select count(eid) from emp;
   练习：通过员工的部门编号列查询数量
      select count(deptId) from emp;
   练习：查询出所有女员工的工资总和
      select sum(salary) from emp where sex=0;
   练习：查询出10号部门的平均工资
      select avg(salary) from emp where deptId=10;
   练习：查询出年龄最大的员工的生日是多少
      select min(birthday) from emp;
   练习：查询出20号部门的最高工资
      select max(salary) from emp where deptId=20;

   分组查询：
      group by
      分组查询通常只能查询分组条件列和聚合函数
   示例：查询出男女员工工资的最高工资、最低工资、平均工资各是多少
      select max(salary),min(salary),avg(salary),sec,ename from emp group by sex;
   练习：查询出各部门的员工数量，工资总和，平均工资
      select count(eid),sum(salary),avg(salary),deptId from emp group by deptId;

   year()   获取日期中的年份
   md5()   加密的函数

   示例：查询出2021-8-5的年份
      select year('2021-8-5');
   练习：查询出1993年出生的员工有哪些
      select * from emp where year(birthday)=1993;
   示例：对12345进行md5加密
      select md5('12345');

（2）子查询

      子查询是多个SQL命令的组合，把一个SQL命令的结果作为另一个SQL命令的条件

   示例：查询出工资最高的员工是谁
      步骤1：查询出工资的最高值
         select max(salary) from emp;
      步骤2：查询出工资为50000的员工
         select * from emp where salary=50000;
      综合：
      select * from emp where salary=(select max(salary) from emp);
   练习：查询出比tom工资高的员工有哪些
      步骤1：查询出tom工资高的员工有哪些
         select salary from emp where ename='tom';
      步骤2：查询出工资高于6000的员工
         select * from emp where salary>6000;
      综合：
      select * from emp where salary>(select salary from emp where ename='tom');
   练习：查询出和tom同一年出生的员工有哪些
      select * frome emp where year(birthday)=(select year(birthday) from emp where ename='tom') and ename!='tom';

（4）多表查询

      要查询的列分布在多个表面，前提表之间要有关联
      

   示例：查询出所有员工姓名及其部门名称
      select emp.ename,dept.dname from emp,dept where emp.deptId=dept.did;
   内连接：inner join 表名 on
      select ename,dname from emp inner join dept on deptId=did;
   左外连接：left outer join 表名 on      outer可以简写
      显示左侧表中所有的记录，先写哪个表哪个就是左
      select ename,dname from emp left outer join dept on deptId=did;
   右外连接：right
      显示右侧表中所有记录，后写哪个表哪个就是右，outer可以简略
      select ename,dname from emp right outer join dept on deptId=did;
   全连接：full join 表名 on      mysql不支持
    联合：
      union   联合以后合并相同的记录   
      union all   联合后合并相同的记录
      
      (select ename,dname from emp left outer join dept on deptId=did)
      union all
      (select ename,dname from emp right outer join dept on deptId=did);
      显示左侧和右侧所有的记录
















