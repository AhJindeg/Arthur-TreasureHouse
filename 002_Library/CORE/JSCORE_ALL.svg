<?xml version="1.0" standalone="no"?><?xml-stylesheet type="text/css" href="https://www.processon.com/themes/default/mind/icons/icons.css" ?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" id="mind-svg-view-con" version="1.1" width="1317.0000305175781px" height="8510.42724609375px"><defs></defs><g id="svgbackgroundid"><defs></defs><rect x="0" y="0" width="1317.0000305175781" height="8510.42724609375" fill="#ffffff"></rect></g><g transform="translate(-9910.50033569336, -5745.00048828125)" id="sdjakdjak9"><rect fill="url(#pattern_mark_view)" x="5000" y="5000" width="10000" height="10000" id="rect_mark_view" pointer-events="none"></rect><defs><pattern patternUnits="userSpaceOnUse" id="pattern_mark_view" width="300" height="300"><text x="0" y="96" fill="rgb(235,235,235)" font-size="18" transform="rotate(-45, 150, 150)">达内教育</text></pattern></defs><g class="svg-topic-con" transform="translate(0.5,0.5)"><path part="right" sub="true" id="line_eb0b8aeaad60" d="M 10000.00033569336 10000.000671386719 C 10000.00033569336 10000.000671386719 10010.00033569336 6159 10139.50033569336 6159" stroke="#43a9ff" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_fd3958d01ca2" d="M 10000.00033569336 10000.000671386719 C 10000.00033569336 10000.000671386719 10010.00033569336 6604 10139.50033569336 6604" stroke="#43a9ff" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_6761a98f1b35" d="M 10000.00033569336 10000.000671386719 C 10000.00033569336 10000.000671386719 10010.00033569336 7318 10139.50033569336 7318" stroke="#43a9ff" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_584940fa5469" d="M 10000.00033569336 10000.000671386719 C 10000.00033569336 10000.000671386719 10010.00033569336 9783 10139.50033569336 9783" stroke="#43a9ff" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_8bbb96ca783f" d="M 10000.00033569336 10000.000671386719 C 10000.00033569336 10000.000671386719 10010.00033569336 11745 10139.50033569336 11745" stroke="#43a9ff" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_af0d7a381dfa" d="M 10000.00033569336 10000.000671386719 C 10000.00033569336 10000.000671386719 10010.00033569336 12028 10139.50033569336 12028" stroke="#43a9ff" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_bba8e8ce3291" d="M 10000.00033569336 10000.000671386719 C 10000.00033569336 10000.000671386719 10010.00033569336 12839 10139.50033569336 12839" stroke="#43a9ff" fill="none" stroke-width="2"></path><path part="right" sub="true" id="line_7afc3dc4611a" d="M 10000.00033569336 10000.000671386719 C 10000.00033569336 10000.000671386719 10010.00033569336 13885 10139.50033569336 13885" stroke="#43a9ff" fill="none" stroke-width="2"></path></g><g class="svg-connection-con" transform="translate(0.5,0.5)"></g><g class="svg-freesums-con" transform="translate(0.5,0.5)"></g><g class="svg-freebos-con" transform="translate(0.5,0.5)"></g></g><g id="7afc3dc4611a"><rect x="229" y="8122.54736328125" rx="5px" ry="5px" width="76" height="35" style="fill: rgb(220,220,220); stroke:rgb(220,220,220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="240" y="8142.94736328125"><tspan>promise</tspan></tspan></text></g></g><g id="a678d446d36e"><rect x="341.4583435058594" y="7800.000244140625" rx="5px" ry="5px" width="217" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="351.4583435058594" y="7815.200244140625"><tspan>Promise 对象用于封装一个 异步操作</tspan></tspan></text></g></g><g id="136dcb4db01b"><rect x="341.4583435058594" y="7855.000244140625" rx="5px" ry="5px" width="145" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="351.4583435058594" y="7870.200244140625"><tspan>Promise对象的3个状态</tspan></tspan></text></g></g><g id="478210cc3472"><rect x="522.8489685058594" y="7836.000244140625" rx="5px" ry="5px" width="350" height="66" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="532.8489685058594" y="7851.200244140625"><tspan>待定（pending）: 初始状态，既没有被兑现，也没有被拒绝。</tspan></tspan><tspan x="532.8489685058594" y="7867.200244140625"><tspan>已兑现（fulfilled）: 意味着操作成功完成。</tspan></tspan><tspan x="532.8489685058594" y="7883.200244140625"><tspan>已拒绝（rejected）: 意味着操作失败。</tspan></tspan></text></g></g><g id="0bdecb2cb3bd"><rect x="341.4583435058594" y="7910.000244140625" rx="5px" ry="5px" width="507" height="215" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"></text></g><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cdn2.processon.com/615d9484e4b0560578f9a14e?e=1633526420&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:AUwTfBD98dOVOJNuuYU_IRj0Uug=" transform="translate(351.4583435058594, 7914.000244140625)" width="487" height="180"></image></g><g id="8b94b12f5d9f"><rect x="341.4583435058594" y="8190.42724609375" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="351.4583435058594" y="8205.62724609375"><tspan>写法</tspan></tspan></text></g></g><g id="1d07d6712f64"><rect x="427.4583435058594" y="8133.42724609375" rx="5px" ry="5px" width="207" height="142" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="437.4583435058594" y="8148.62724609375"><tspan>new Promise((resolve, reject)=&gt;{</tspan></tspan><tspan x="437.4583435058594" y="8164.62724609375"><tspan>  if (成功){</tspan></tspan><tspan x="437.4583435058594" y="8180.62724609375"><tspan>    resolve(成功信息)  </tspan></tspan><tspan x="437.4583435058594" y="8196.62724609375"><tspan>  }else{</tspan></tspan><tspan x="437.4583435058594" y="8212.62724609375"><tspan>    reject(失败信息)</tspan></tspan><tspan x="437.4583435058594" y="8228.62724609375"><tspan>  }</tspan></tspan><tspan x="437.4583435058594" y="8244.62724609375"><tspan>}).then(result=&gt;{}).catch(err=&gt;{})</tspan></tspan></text></g></g><g id="88ad12af4fa6"><rect x="341.4583435058594" y="8367.92724609375" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="351.4583435058594" y="8383.12724609375"><tspan>语法糖</tspan></tspan></text></g></g><g id="90a2581a3a4a"><rect x="433.4583435058594" y="8283.42724609375" rx="5px" ry="5px" width="96" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.4583435058594" y="8298.62724609375"><tspan>aync 与 await</tspan></tspan></text></g></g><g id="95e3079982c6"><rect x="565.3645935058594" y="8283.42724609375" rx="5px" ry="5px" width="180" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="575.3645935058594" y="8298.62724609375"><tspan>不用链式写法 获取返回值结果</tspan></tspan></text></g></g><g id="9c94f202f3bc"><rect x="433.4583435058594" y="8319.42724609375" rx="5px" ry="5px" width="303" height="161" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.4583435058594" y="8334.62724609375"><tspan>async function xx(){</tspan></tspan><tspan x="443.4583435058594" y="8350.62724609375"><tspan>  try{</tspan></tspan><tspan x="443.4583435058594" y="8366.62724609375"><tspan>    // 正确信息</tspan></tspan><tspan x="443.4583435058594" y="8382.62724609375"><tspan>    await let a = new Promise((resolve, reject)=&gt;{})</tspan></tspan><tspan x="443.4583435058594" y="8398.62724609375"><tspan>  }catch(error){</tspan></tspan><tspan x="443.4583435058594" y="8414.62724609375"><tspan>    console.log('错误信息')</tspan></tspan><tspan x="443.4583435058594" y="8430.62724609375"><tspan>  }</tspan></tspan><tspan x="443.4583435058594" y="8446.62724609375"><tspan>}</tspan></tspan></text></g></g><g id="bba8e8ce3291"><rect x="229" y="7075.83349609375" rx="5px" ry="5px" width="64" height="35" style="fill: rgb(254,224,198); stroke:rgb(254,224,198);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="240" y="7096.23349609375"><tspan>新语法</tspan></tspan></text></g></g><g id="48a5c91a4aea"><rect x="329.0000305175781" y="6562.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="339.0000305175781" y="6577.200244140625"><tspan>声明方式</tspan></tspan></text></g></g><g id="78cdfa0c0e1e"><rect x="433.0000305175781" y="6436.000244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="6451.200244140625"><tspan>var</tspan></tspan></text></g></g><g id="107435270fc4"><rect x="519.0000305175781" y="6417.000244140625" rx="5px" ry="5px" width="384" height="66" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="529.0000305175781" y="6432.200244140625"><tspan>存在变量提升, 全局污染</tspan></tspan><tspan x="529.0000305175781" y="6448.200244140625"><tspan>声明的变量会出现在全局区 window 中</tspan></tspan><tspan x="529.0000305175781" y="6464.200244140625"><tspan>除非配合 函数的闭包特性, 才能制作局部作用域的变量, 避免全局污染</tspan></tspan></text></g></g><g id="3318ed0ca872"><rect x="433.0000305175781" y="6545.000244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="6560.200244140625"><tspan>let</tspan></tspan></text></g></g><g id="22b1df69d652"><rect x="519.0000305175781" y="6491.000244140625" rx="5px" ry="5px" width="297" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="529.0000305175781" y="6506.200244140625"><tspan>有变量提升, 但是不会具有默认值, 在赋值前无法使用</tspan></tspan></text></g></g><g id="3347154be2bb"><rect x="519.0000305175781" y="6527.000244140625" rx="5px" ry="5px" width="524" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="529.0000305175781" y="6542.200244140625"><tspan>块级作用域: 不存在全局污染, 因为会在 window 同级别声明另一个对象 Script, 在其中声明变量</tspan></tspan></text></g></g><g id="91c03156cf52"><rect x="519.0000305175781" y="6563.000244140625" rx="5px" ry="5px" width="164" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="529.0000305175781" y="6578.200244140625"><tspan>无法重复声明同一个变量名</tspan></tspan></text></g></g><g id="61c132168034"><rect x="519.0000305175781" y="6599.000244140625" rx="5px" ry="5px" width="143" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="529.0000305175781" y="6614.200244140625"><tspan>在新JS中, 用于代替 var</tspan></tspan></text></g></g><g id="dcd2012c410c"><rect x="433.0000305175781" y="6671.000244140625" rx="5px" ry="5px" width="51" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="6686.200244140625"><tspan>const</tspan></tspan></text></g></g><g id="80f9f43756d2"><rect x="520.0677185058594" y="6635.000244140625" rx="5px" ry="5px" width="168" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="530.0677185058594" y="6650.200244140625"><tspan>常量, 所有特性都与 let 相同</tspan></tspan></text></g></g><g id="d5d67912d404"><rect x="520.0677185058594" y="6671.000244140625" rx="5px" ry="5px" width="288" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="530.0677185058594" y="6686.200244140625"><tspan>不同点:  常量声明时必须赋值, 且之后无法重新赋值</tspan></tspan></text></g></g><g id="477093f07245"><rect x="520.0677185058594" y="6707.000244140625" rx="5px" ry="5px" width="134" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="530.0677185058594" y="6722.200244140625"><tspan>通常: 常量名会全大写</tspan></tspan></text></g></g><g id="61374b46a9ca"><rect x="329.0000305175781" y="6869.000244140625" rx="5px" ry="5px" width="149" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="339.0000305175781" y="6884.200244140625"><tspan>替换普通函数this的语法</tspan></tspan></text></g></g><g id="d7c68fd60cd3"><rect x="513.6094055175781" y="6779.000244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="523.6094055175781" y="6794.200244140625"><tspan>bind</tspan></tspan></text></g></g><g id="440010a805c8"><rect x="599.6094055175781" y="6743.000244140625" rx="5px" ry="5px" width="247" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="609.6094055175781" y="6758.200244140625"><tspan>var 新函数 = 函数.bind(对象, 参数, 参数...)</tspan></tspan></text></g></g><g id="b8b7f74947a3"><rect x="599.6094055175781" y="6779.000244140625" rx="5px" ry="5px" width="299" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="609.6094055175781" y="6794.200244140625"><tspan>声明一个新的函数, 新函数中的this会绑定指定的对象</tspan></tspan></text></g></g><g id="ba403dd10c47"><rect x="599.6094055175781" y="6815.000244140625" rx="5px" ry="5px" width="196" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="609.6094055175781" y="6830.200244140625"><tspan>bind返回的新函数, 需要主动触发</tspan></tspan></text></g></g><g id="4f7c1f4db21d"><rect x="513.6094055175781" y="6869.000244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="523.6094055175781" y="6884.200244140625"><tspan>call</tspan></tspan></text></g></g><g id="0d6f09c9e8cf"><rect x="599.6094055175781" y="6851.000244140625" rx="5px" ry="5px" width="165" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="609.6094055175781" y="6866.200244140625"><tspan>函数.call(对象, 参数, 参数..)</tspan></tspan></text></g></g><g id="bd416679cc0f"><rect x="599.6094055175781" y="6887.000244140625" rx="5px" ry="5px" width="400" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="609.6094055175781" y="6902.200244140625"><tspan>直接触发函数, 指定函数中的this为参数1对象,  其他参数作为函数的参数</tspan></tspan></text></g></g><g id="4239089edc83"><rect x="513.6094055175781" y="6941.000244140625" rx="5px" ry="5px" width="52" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="523.6094055175781" y="6956.200244140625"><tspan>apply</tspan></tspan></text></g></g><g id="7da8085408ad"><rect x="601.1197814941406" y="6923.000244140625" rx="5px" ry="5px" width="188" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="611.1197814941406" y="6938.200244140625"><tspan>函数.apply(对象, [参数, 参数...])</tspan></tspan></text></g></g><g id="6f3c98e049af"><rect x="601.1197814941406" y="6959.000244140625" rx="5px" ry="5px" width="471" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="611.1197814941406" y="6974.200244140625"><tspan>直接触发函数, 指定函数中的this为参数1对象, 参数2数组中的值 以此作为 函数的参数</tspan></tspan></text></g></g><g id="0455b7a1cf58"><rect x="513.6094055175781" y="6995.000244140625" rx="5px" ry="5px" width="298" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="523.6094055175781" y="7010.200244140625"><tspan>箭头函数没有自己的this, 以上写法对 箭头函数 无效!</tspan></tspan></text></g></g><g id="e914f33de40c"><rect x="329.0000305175781" y="7194.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="339.0000305175781" y="7209.200244140625"><tspan>箭头函数</tspan></tspan></text></g></g><g id="079843ca5913"><rect x="433.0000305175781" y="7031.000244140625" rx="5px" ry="5px" width="152" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7046.200244140625"><tspan>用于简化普通函数的语法</tspan></tspan></text></g></g><g id="4f5e3bd58e28"><rect x="433.0000305175781" y="7184.500244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7199.700244140625"><tspan>写法</tspan></tspan></text></g></g><g id="0515bbbecd54"><rect x="519.0000305175781" y="7067.000244140625" rx="5px" ry="5px" width="169" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="529.0000305175781" y="7082.200244140625"><tspan>(参数, 参数...) =&gt;{ 函数体.. }</tspan></tspan></text></g></g><g id="a97806d4637f"><rect x="519.0000305175781" y="7121.000244140625" rx="5px" ry="5px" width="63" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="529.0000305175781" y="7136.200244140625"><tspan>语法糖1</tspan></tspan></text></g></g><g id="8acaa587c90d"><rect x="618.0416564941406" y="7103.000244140625" rx="5px" ry="5px" width="201" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="628.0416564941406" y="7118.200244140625"><tspan>如果只有一个参数, 则 ( ) 可以省略</tspan></tspan></text></g></g><g id="6295c839fa71"><rect x="618.0416564941406" y="7139.000244140625" rx="5px" ry="5px" width="90" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="628.0416564941406" y="7154.200244140625"><tspan>参数 =&gt; { .. }</tspan></tspan></text></g></g><g id="82322ed679fe"><rect x="519.0000305175781" y="7238.500244140625" rx="5px" ry="5px" width="63" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="529.0000305175781" y="7253.700244140625"><tspan>语法糖2</tspan></tspan></text></g></g><g id="dd7490dd38e4"><rect x="618.0416564941406" y="7175.000244140625" rx="5px" ry="5px" width="277" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="628.0416564941406" y="7190.200244140625"><tspan>如果函数体中只有一行 return代码, 则可以省略{}</tspan></tspan></text></g></g><g id="5ba03fc1eddd"><rect x="618.0416564941406" y="7220.500244140625" rx="5px" ry="5px" width="75" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="628.0416564941406" y="7235.700244140625"><tspan>( ) =&gt; xxx</tspan></tspan></text></g></g><g id="69acd5553c4f"><rect x="728.7604064941406" y="7211.000244140625" rx="5px" ry="5px" width="121" height="47" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="738.7604064941406" y="7226.200244140625"><tspan>相当于</tspan></tspan><tspan x="738.7604064941406" y="7242.200244140625"><tspan>()=&gt;{ return xxx; }</tspan></tspan></text></g></g><g id="d41afeeaa233"><rect x="618.0416564941406" y="7284.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="628.0416564941406" y="7299.200244140625"><tspan>注意事项</tspan></tspan></text></g></g><g id="3b1c2f7a05e3"><rect x="722.0416564941406" y="7266.000244140625" rx="5px" ry="5px" width="293" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="732.0416564941406" y="7281.200244140625"><tspan>如果返回值是对象类型, 则必须带()包围, 来防止歧义</tspan></tspan></text></g></g><g id="796b43605c3f"><rect x="722.0416564941406" y="7302.000244140625" rx="5px" ry="5px" width="102" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="732.0416564941406" y="7317.200244140625"><tspan>()=&gt;({a:5, b:5})</tspan></tspan></text></g></g><g id="55fb087a7974"><rect x="433.0000305175781" y="7347.500244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7362.700244140625"><tspan>this</tspan></tspan></text></g></g><g id="b919ffce802c"><rect x="519.0000305175781" y="7338.000244140625" rx="5px" ry="5px" width="161" height="47" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="529.0000305175781" y="7353.200244140625"><tspan>箭头函数没有自己的this</tspan></tspan><tspan x="529.0000305175781" y="7369.200244140625"><tspan>其this是 上级作用域的this</tspan></tspan></text></g></g><g id="77aee507ed1e"><rect x="329.0000305175781" y="7393.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="339.0000305175781" y="7408.200244140625"><tspan>展开语法</tspan></tspan></text></g></g><g id="03b93ac5eb17"><rect x="433.0000305175781" y="7393.000244140625" rx="5px" ry="5px" width="104" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7408.200244140625"><tspan>...数组 或 ...对象</tspan></tspan></text></g></g><g id="74928853dadb"><rect x="329.0000305175781" y="7447.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="339.0000305175781" y="7462.200244140625"><tspan>数组解构</tspan></tspan></text></g></g><g id="f75a4c6f56b4"><rect x="433.0000305175781" y="7429.000244140625" rx="5px" ry="5px" width="120" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7444.200244140625"><tspan>var [a,,b] = [1,2,3]</tspan></tspan></text></g></g><g id="19f85017b2ce"><rect x="433.0000305175781" y="7465.000244140625" rx="5px" ry="5px" width="98" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7480.200244140625"><tspan>则 a=1;  b =3;</tspan></tspan></text></g></g><g id="39ae173e6e0e"><rect x="329.0000305175781" y="7519.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="339.0000305175781" y="7534.200244140625"><tspan>对象解构</tspan></tspan></text></g></g><g id="f8a4eb19645b"><rect x="433.0000305175781" y="7501.000244140625" rx="5px" ry="5px" width="163" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7516.200244140625"><tspan>var {a, b:bo} = {a:4, b: 55}</tspan></tspan></text></g></g><g id="d2722707829b"><rect x="433.0000305175781" y="7537.000244140625" rx="5px" ry="5px" width="113" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7552.200244140625"><tspan>则 a = 4; bo=55;</tspan></tspan></text></g></g><g id="22529a2a0880"><rect x="329.0000305175781" y="7657.500244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="339.0000305175781" y="7672.700244140625"><tspan>参数解构</tspan></tspan></text></g></g><g id="f17bdd25d4ea"><rect x="433.0000305175781" y="7573.000244140625" rx="5px" ry="5px" width="136" height="104" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7588.200244140625"><tspan>function xxx([a,b,c]){</tspan></tspan><tspan x="443.0000305175781" y="7604.200244140625"><tspan>   a;</tspan></tspan><tspan x="443.0000305175781" y="7620.200244140625"><tspan>   b;</tspan></tspan><tspan x="443.0000305175781" y="7636.200244140625"><tspan>   c:</tspan></tspan><tspan x="443.0000305175781" y="7652.200244140625"><tspan>}</tspan></tspan></text></g></g><g id="3e21918ed766"><rect x="604.5833435058594" y="7601.500244140625" rx="5px" ry="5px" width="166" height="47" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="614.5833435058594" y="7616.700244140625"><tspan>var args = [12, true, 'abc']</tspan></tspan><tspan x="614.5833435058594" y="7632.700244140625"><tspan>xxx(args)</tspan></tspan></text></g></g><g id="b4b8ed76f02d"><rect x="433.0000305175781" y="7685.000244140625" rx="5px" ry="5px" width="152" height="85" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="443.0000305175781" y="7700.200244140625"><tspan>function xxx({a, b: bo}){</tspan></tspan><tspan x="443.0000305175781" y="7716.200244140625"><tspan>  a;</tspan></tspan><tspan x="443.0000305175781" y="7732.200244140625"><tspan>  bo;</tspan></tspan><tspan x="443.0000305175781" y="7748.200244140625"><tspan>}</tspan></tspan></text></g></g><g id="3a403e78cf0c"><rect x="620.9635314941406" y="7704.000244140625" rx="5px" ry="5px" width="160" height="47" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="630.9635314941406" y="7719.200244140625"><tspan>var args = {a: 23, b: true}</tspan></tspan><tspan x="630.9635314941406" y="7735.200244140625"><tspan>xxx(args)</tspan></tspan></text></g></g><g id="af0d7a381dfa"><rect x="229" y="6265.33349609375" rx="5px" ry="5px" width="106" height="35" style="fill: rgb(220,220,220); stroke:rgb(220,220,220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="240" y="6285.73349609375"><tspan>数组高级方法</tspan></tspan></text></g></g><g id="5e6c8e6373cb"><rect x="371.0000305175781" y="6179.000244140625" rx="5px" ry="5px" width="51" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="381.0000305175781" y="6194.200244140625"><tspan>every</tspan></tspan></text></g></g><g id="ad0e71f431eb"><rect x="457.8541564941406" y="6179.000244140625" rx="5px" ry="5px" width="464" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="467.8541564941406" y="6194.200244140625"><tspan>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</tspan></tspan></text></g></g><g id="82dd6efab5b9"><rect x="371.0000305175781" y="6215.000244140625" rx="5px" ry="5px" width="51" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="381.0000305175781" y="6230.200244140625"><tspan>some</tspan></tspan></text></g></g><g id="4f62f4e0436c"><rect x="458.2395935058594" y="6215.000244140625" rx="5px" ry="5px" width="362" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="468.2395935058594" y="6230.200244140625"><tspan>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</tspan></tspan></text></g></g><g id="8901028fcfd5"><rect x="371.0000305175781" y="6251.000244140625" rx="5px" ry="5px" width="63" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="381.0000305175781" y="6266.200244140625"><tspan>forEach</tspan></tspan></text></g></g><g id="09cde4d616c6"><rect x="470.0104064941406" y="6251.000244140625" rx="5px" ry="5px" width="236" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="480.0104064941406" y="6266.200244140625"><tspan>对数组的每个元素执行一次给定的函数。</tspan></tspan></text></g></g><g id="e043ef6885ce"><rect x="371.0000305175781" y="6287.000244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="381.0000305175781" y="6302.200244140625"><tspan>map</tspan></tspan></text></g></g><g id="4eff7f22b489"><rect x="457.0000305175781" y="6287.000244140625" rx="5px" ry="5px" width="464" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="467.0000305175781" y="6302.200244140625"><tspan>创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</tspan></tspan></text></g></g><g id="1922d78fb88c"><rect x="371.0000305175781" y="6323.000244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="381.0000305175781" y="6338.200244140625"><tspan>filter</tspan></tspan></text></g></g><g id="805f8af6bd5b"><rect x="457.0000305175781" y="6323.000244140625" rx="5px" ry="5px" width="362" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="467.0000305175781" y="6338.200244140625"><tspan>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</tspan></tspan></text></g></g><g id="768710ea06f5"><rect x="371.0000305175781" y="6359.000244140625" rx="5px" ry="5px" width="59" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="381.0000305175781" y="6374.200244140625"><tspan>reduce</tspan></tspan></text></g></g><g id="547960bc0721"><rect x="466.2916564941406" y="6359.000244140625" rx="5px" ry="5px" width="528" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="476.2916564941406" y="6374.200244140625"><tspan>对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</tspan></tspan></text></g></g><g id="8bbb96ca783f"><rect x="229" y="5981.83349609375" rx="5px" ry="5px" width="78" height="35" style="fill: rgb(229,204,255); stroke:rgb(229,204,255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="240" y="6002.23349609375"><tspan>严格模式</tspan></tspan></text></g></g><g id="35361f91a3bd"><rect x="343.0000305175781" y="5850.000244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="5865.200244140625"><tspan>ES</tspan></tspan></text></g></g><g id="174f07f57c86"><rect x="429.0000305175781" y="5850.000244140625" rx="5px" ry="5px" width="88" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="439.0000305175781" y="5865.200244140625"><tspan>ECMAScript</tspan></tspan></text></g></g><g id="74e01f079574"><rect x="552.6510314941406" y="5850.000244140625" rx="5px" ry="5px" width="278" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="562.6510314941406" y="5865.200244140625"><tspan>欧洲计算机制造商协会, 设定计算机中的程序标准</tspan></tspan></text></g></g><g id="921220b3224f"><rect x="343.0000305175781" y="5886.000244140625" rx="5px" ry="5px" width="438" height="47" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="5901.200244140625"><tspan>ES5 (2009年) 推出了严格模式语法, 让JS引擎可以提前发现代码中的错误与风险</tspan></tspan><tspan x="353.0000305175781" y="5917.200244140625"><tspan>提高代码质量, 健壮性, 安全性</tspan></tspan></text></g></g><g id="d35477a28eea"><rect x="343.0000305175781" y="5941.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="5956.200244140625"><tspan>开启方式</tspan></tspan></text></g></g><g id="8a393f262959"><rect x="447.0000305175781" y="5941.000244140625" rx="5px" ry="5px" width="338" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="5956.200244140625"><tspan>在需要采用严格模式的 JS代码最上方, 添加  'use strict' 即可</tspan></tspan></text></g></g><g id="195397a3c851"><rect x="343.0000305175781" y="6049.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="6064.200244140625"><tspan>具体改动</tspan></tspan></text></g></g><g id="46b980b1b3fc"><rect x="447.0000305175781" y="5977.000244140625" rx="5px" ry="5px" width="152" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="5992.200244140625"><tspan>变量必须声明后才能使用</tspan></tspan></text></g></g><g id="4ae29fce91b6"><rect x="635.0000305175781" y="5977.000244140625" rx="5px" ry="5px" width="157" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="645.0000305175781" y="5992.200244140625"><tspan>用 var let const 一种声明</tspan></tspan></text></g></g><g id="7a2bb4ef762f"><rect x="447.0000305175781" y="6013.000244140625" rx="5px" ry="5px" width="256" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="6028.200244140625"><tspan>window中的普通函数内的this 是undefined</tspan></tspan></text></g></g><g id="b4a1862f74e7"><rect x="447.0000305175781" y="6049.000244140625" rx="5px" ry="5px" width="120" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="6064.200244140625"><tspan>静默失败 不再静默</tspan></tspan></text></g></g><g id="b918b2b73c5d"><rect x="447.0000305175781" y="6103.000244140625" rx="5px" ry="5px" width="77" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="6118.200244140625"><tspan>禁用callee</tspan></tspan></text></g></g><g id="e2a9f906d5a6"><rect x="559.6562805175781" y="6085.000244140625" rx="5px" ry="5px" width="353" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="569.6562805175781" y="6100.200244140625"><tspan>匿名函数自调用时, 使用 arguments.callee 代表自身, 效率偏低</tspan></tspan></text></g></g><g id="0d5f5d82428f"><rect x="559.6562805175781" y="6121.000244140625" rx="5px" ry="5px" width="243" height="28" style="fill: rgb(204, 229, 255); stroke:rgb(204, 229, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="569.6562805175781" y="6136.200244140625"><tspan>后期支持了 命名函数的自调用, 代替callee</tspan></tspan></text></g></g><g id="584940fa5469"><rect x="229" y="4019.83349609375" rx="5px" ry="5px" width="78" height="35" style="fill: rgb(230,255,204); stroke:rgb(230,255,204);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="240" y="4040.23349609375"><tspan>面向对象</tspan></tspan></text></g></g><g id="c6b9929c995c"><rect x="343.0000305175781" y="2255.0001220703125" rx="5px" ry="5px" width="122" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="2270.2001220703123"><tspan>在JS中, 万物皆对象</tspan></tspan></text></g></g><g id="4a30a6f2f589"><rect x="343.0000305175781" y="2417.0001220703125" rx="5px" ry="5px" width="92" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="2432.2001220703123"><tspan>JS的数据类型</tspan></tspan></text></g></g><g id="3bcd0cf52bb8"><rect x="470.6822814941406" y="2399.0001220703125" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="480.6822814941406" y="2414.2001220703123"><tspan>基础类型</tspan></tspan></text></g></g><g id="77583fff3ce0"><rect x="574.6822814941406" y="2291.0001220703125" rx="5px" ry="5px" width="65" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="584.6822814941406" y="2306.2001220703123"><tspan>number</tspan></tspan></text></g></g><g id="6a82beb93c89"><rect x="574.6822814941406" y="2327.0001220703125" rx="5px" ry="5px" width="53" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="584.6822814941406" y="2342.2001220703123"><tspan>string</tspan></tspan></text></g></g><g id="e86628089cf7"><rect x="574.6822814941406" y="2363.0001220703125" rx="5px" ry="5px" width="67" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="584.6822814941406" y="2378.2001220703123"><tspan>boolean</tspan></tspan></text></g></g><g id="2697e2413f4b"><rect x="574.6822814941406" y="2399.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="584.6822814941406" y="2414.2001220703123"><tspan>null</tspan></tspan></text></g></g><g id="d0e0f529de85"><rect x="574.6822814941406" y="2435.0001220703125" rx="5px" ry="5px" width="79" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="584.6822814941406" y="2450.2001220703123"><tspan>undefined</tspan></tspan></text></g></g><g id="8c2ffec6accf"><rect x="574.6822814941406" y="2471.0001220703125" rx="5px" ry="5px" width="54" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="584.6822814941406" y="2486.2001220703123"><tspan>bigint</tspan></tspan></text></g></g><g id="5f5b6685f6f7"><rect x="574.6822814941406" y="2507.0001220703125" rx="5px" ry="5px" width="62" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="584.6822814941406" y="2522.2001220703123"><tspan>symbol</tspan></tspan></text></g></g><g id="ce706ce2fef2"><rect x="683.1927185058594" y="2397.83349609375" rx="5px" ry="5px" width="44" height="30" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="690.1927185058594" y="2415.23349609375"><tspan>7种</tspan></tspan></text></g></g><g id="16991c8898b2"><rect x="470.6822814941406" y="2543.0001220703125" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="480.6822814941406" y="2558.2001220703123"><tspan>对象类型</tspan></tspan></text></g></g><g id="b8d49c66e053"><rect x="343.0000305175781" y="2597.0001220703125" rx="5px" ry="5px" width="128" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="2612.2001220703123"><tspan>对象类型是引用类型</tspan></tspan></text></g></g><g id="0a45ffd9ad6d"><rect x="507.0000305175781" y="2579.0001220703125" rx="5px" ry="5px" width="384" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="517.0000305175781" y="2594.2001220703123"><tspan>基础类型大小固定, 有极限值, 存储时可以直接存储到 变量对应的内存</tspan></tspan></text></g></g><g id="fae44da24757"><rect x="507.0000305175781" y="2615.0001220703125" rx="5px" ry="5px" width="435" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="517.0000305175781" y="2630.2001220703123"><tspan>对象类型大小可变, 无极限值, 存储在堆区域中. 变量中存储的是对象类型的地址</tspan></tspan></text></g></g><g id="b1386599415a"><rect x="343.0000305175781" y="2651.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="2666.2001220703123"><tspan>克隆</tspan></tspan></text></g></g><g id="fb15904406f0"><rect x="429.0000305175781" y="2651.0001220703125" rx="5px" ry="5px" width="500" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="439.0000305175781" y="2666.2001220703123"><tspan>要想复制一个对象类型, 则必须 声明空对象, 然后把之前对象中的内容 挨个复制到 空对象中</tspan></tspan></text></g></g><g id="dfbeba71b66e"><rect x="343.0000305175781" y="2724.0001220703125" rx="5px" ry="5px" width="77" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="2739.2001220703123"><tspan>this关键词</tspan></tspan></text></g></g><g id="69ff45388bf2"><rect x="455.6094055175781" y="2687.0001220703125" rx="5px" ry="5px" width="215" height="47" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="465.6094055175781" y="2702.2001220703123"><tspan>普通函数</tspan></tspan><tspan x="465.6094055175781" y="2718.2001220703123"><tspan>中的this, 代表函数运行时所在的对象</tspan></tspan></text></g></g><g id="cb022a9c2260"><rect x="455.6094055175781" y="2742.0001220703125" rx="5px" ry="5px" width="359" height="47" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="465.6094055175781" y="2757.2001220703123"><tspan>箭头函数</tspan></tspan><tspan x="465.6094055175781" y="2773.2001220703123"><tspan>本身没有this, 其中的this, 代表函数声明时所在的作用域中的this</tspan></tspan></text></g></g><g id="903cc285a548"><rect x="343.0000305175781" y="2888.0001220703125" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="2903.2001220703123"><tspan>构造函数</tspan></tspan></text></g></g><g id="46adb8f8810c"><rect x="447.0000305175781" y="2797.0001220703125" rx="5px" ry="5px" width="200" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="2812.2001220703123"><tspan>可以重复生成固定结构的对象类型</tspan></tspan></text></g></g><g id="a60f0b188fdd"><rect x="447.0000305175781" y="2852.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="2867.2001220703123"><tspan>格式</tspan></tspan></text></g></g><g id="bf15fd17cf94"><rect x="533.0000305175781" y="2833.0001220703125" rx="5px" ry="5px" width="231" height="66" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="543.0000305175781" y="2848.2001220703123"><tspan>function FunctionName(参数, 参数...){</tspan></tspan><tspan x="543.0000305175781" y="2864.2001220703123"><tspan>    this.属性名 = 参数</tspan></tspan><tspan x="543.0000305175781" y="2880.2001220703123"><tspan>}</tspan></tspan></text></g></g><g id="491b17a6d4b6"><rect x="799.6459045410156" y="2852.0001220703125" rx="5px" ry="5px" width="234" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="809.6459045410156" y="2867.2001220703123"><tspan>函数名要求 大驼峰命名法, 即首字母大写</tspan></tspan></text></g></g><g id="07a57112dc69"><rect x="447.0000305175781" y="2925.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="2940.2001220703123"><tspan>使用</tspan></tspan></text></g></g><g id="51c9a599ea36"><rect x="533.0000305175781" y="2907.0001220703125" rx="5px" ry="5px" width="199" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="543.0000305175781" y="2922.2001220703123"><tspan>var 变量 = new Function(参数...)</tspan></tspan></text></g></g><g id="dd4fb1af5ba2"><rect x="533.0000305175781" y="2943.0001220703125" rx="5px" ry="5px" width="80" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="543.0000305175781" y="2958.2001220703123"><tspan>new运算符</tspan></tspan></text></g></g><g id="7a85dd2315bf"><rect x="648.6822814941406" y="2943.0001220703125" rx="5px" ry="5px" width="176" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="658.6822814941406" y="2958.2001220703123"><tspan>触发构造函数生成对象的功能</tspan></tspan></text></g></g><g id="4c54a97fbcab"><rect x="447.0000305175781" y="2979.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="2994.2001220703123"><tspan>this</tspan></tspan></text></g></g><g id="a7ee4304226c"><rect x="533.0000305175781" y="2979.0001220703125" rx="5px" ry="5px" width="260" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="543.0000305175781" y="2994.2001220703123"><tspan>构造函数中的this 代表当前要生成的对象类型</tspan></tspan></text></g></g><g id="9bbfd618c435"><rect x="343.0000305175781" y="3388.5001525878906" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="3403.7001525878904"><tspan>原型</tspan></tspan></text></g></g><g id="18597d523193"><rect x="429.0000305175781" y="3124.0001220703125" rx="5px" ry="5px" width="137" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="439.0000305175781" y="3139.2001220703123"><tspan>对象的原型 __proto__</tspan></tspan></text></g></g><g id="44544824be66"><rect x="602.0416564941406" y="3077.5001220703125" rx="5px" ry="5px" width="246" height="47" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="612.0416564941406" y="3092.7001220703123"><tspan>每个对象类型, 都具有一个 __proto__属性, </tspan></tspan><tspan x="612.0416564941406" y="3108.7001220703123"><tspan>其中存放了对象类型的一些基础通用属性</tspan></tspan></text></g></g><g id="703acf56f2da"><rect x="883.9635314941406" y="3015.0001220703125" rx="5px" ry="5px" width="242" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="893.9635314941406" y="3030.2001220703123"><tspan>不同浏览器, 打印对象类型看到的结果不同</tspan></tspan></text></g></g><g id="7d8afb8c87e5"><rect x="883.9635314941406" y="3051.0001220703125" rx="5px" ry="5px" width="64" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="893.9635314941406" y="3066.2001220703123"><tspan>chrome</tspan></tspan></text></g></g><g id="4151604cfc1f"><rect x="983.6354064941406" y="3051.0001220703125" rx="5px" ry="5px" width="93" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="993.6354064941406" y="3066.2001220703123"><tspan>[[Prototype]]</tspan></tspan></text></g></g><g id="afaa5468c949"><rect x="883.9635314941406" y="3087.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="893.9635314941406" y="3102.2001220703123"><tspan>火狐</tspan></tspan></text></g></g><g id="624ee8ff386e"><rect x="969.9635314941406" y="3087.0001220703125" rx="5px" ry="5px" width="95" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="979.9635314941406" y="3102.2001220703123"><tspan>&lt;Prototype&gt;</tspan></tspan></text></g></g><g id="c0d19545b74d"><rect x="883.9635314941406" y="3141.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="893.9635314941406" y="3156.2001220703123"><tspan>360</tspan></tspan></text></g></g><g id="9eda79d867f6"><rect x="969.9635314941406" y="3123.0001220703125" rx="5px" ry="5px" width="73" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="979.9635314941406" y="3138.2001220703123"><tspan>__proto__</tspan></tspan></text></g></g><g id="c0fd61becb10"><rect x="969.9635314941406" y="3159.0001220703125" rx="5px" ry="5px" width="168" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="979.9635314941406" y="3174.2001220703123"><tspan>推荐用 360 查看对象的原型</tspan></tspan></text></g></g><g id="2170f355c7c7"><rect x="602.0416564941406" y="3195.0001220703125" rx="5px" ry="5px" width="244" height="66" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="612.0416564941406" y="3210.2001220703123"><tspan>当调用一个对象的属性时, 会遵循就近原则</tspan></tspan><tspan x="612.0416564941406" y="3226.2001220703123"><tspan>1. 先在对象自身查找, 如果对象自身没有则</tspan></tspan><tspan x="612.0416564941406" y="3242.2001220703123"><tspan>2. 到对象的 __proto__ 属性中查找</tspan></tspan></text></g></g><g id="a0af9e994415"><rect x="881.9584045410156" y="3214.0001220703125" rx="5px" ry="5px" width="264" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="891.9584045410156" y="3229.2001220703123"><tspan>例如 obj.toString == obj.__proto__.toString</tspan></tspan></text></g></g><g id="0b046517a695"><rect x="429.0000305175781" y="3296.5001220703125" rx="5px" ry="5px" width="165" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="439.0000305175781" y="3311.7001220703123"><tspan>构造函数的原型 prototype</tspan></tspan></text></g></g><g id="5b7e7af6e22a"><rect x="629.8229064941406" y="3269.0001220703125" rx="5px" ry="5px" width="367" height="47" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="639.8229064941406" y="3284.2001220703123"><tspan>每个函数都有一个 prototype 属性, 当函数被new运算符触发时</tspan></tspan><tspan x="639.8229064941406" y="3300.2001220703123"><tspan>就会把这个 prototype 属性, 传递到生成对象的 __proto__ 属性中</tspan></tspan></text></g></g><g id="eebbd228dbdf"><rect x="629.8229064941406" y="3324.0001220703125" rx="5px" ry="5px" width="230" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="639.8229064941406" y="3339.2001220703123"><tspan>对象.__proto__ ==构造函数.prototype</tspan></tspan></text></g></g><g id="2361957f72d2"><rect x="895.7135314941406" y="3324.0001220703125" rx="5px" ry="5px" width="391" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="905.7135314941406" y="3339.2001220703123"><tspan>__proto__ 和 prototype 就是同一个对象, 只是所处位置不同 名称不同</tspan></tspan></text></g></g><g id="f3ebb892faad"><rect x="429.0000305175781" y="3461.5001525878906" rx="5px" ry="5px" width="151" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="439.0000305175781" y="3476.7001525878904"><tspan>原型链 prototype chain</tspan></tspan></text></g></g><g id="6694d7754c0f"><rect x="616.0000305175781" y="3360.0001220703125" rx="5px" ry="5px" width="465" height="66" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="626.0000305175781" y="3375.2001220703123"><tspan>对象在使用一个属性时, 会先在自身查找, 如果自身没有则到 其__proto__ 属性中查找</tspan></tspan><tspan x="626.0000305175781" y="3391.2001220703123"><tspan>如果 __proto__ 属性也有自己的 __proto__ 属性, 则继续向内查找,  </tspan></tspan><tspan x="626.0000305175781" y="3407.2001220703123"><tspan>直到最终__proto__ 属性为null 为止</tspan></tspan></text></g></g><g id="30d171b20f30"><rect x="616.0000305175781" y="3462.5001525878906" rx="5px" ry="5px" width="92" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="626.0000305175781" y="3477.7001525878904"><tspan>最基础的原型</tspan></tspan></text></g></g><g id="3b007796fe3e"><rect x="744.0000305175781" y="3434.0001525878906" rx="5px" ry="5px" width="257" height="85" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="754.0000305175781" y="3449.2001525878904"><tspan>Object构造函数 是所有对象的根本, </tspan></tspan><tspan x="754.0000305175781" y="3465.2001525878904"><tspan>所以 Object.prototype 是最基础的原型对象</tspan></tspan><tspan x="754.0000305175781" y="3481.2001525878904"><tspan>Object.prototype 不再有原型, 即 </tspan></tspan><tspan x="754.0000305175781" y="3497.2001525878904"><tspan>Object.prototype.__proto__ == null</tspan></tspan></text></g></g><g id="52b4f220e945"><rect x="616.0000305175781" y="3527.0001525878906" rx="5px" ry="5px" width="59" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="626.0000305175781" y="3542.2001525878904"><tspan>for..in..</tspan></tspan></text></g></g><g id="2b4b19d0e448"><rect x="710.5156555175781" y="3527.0001525878906" rx="5px" ry="5px" width="200" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="720.5156555175781" y="3542.2001525878904"><tspan>此方法会遍历原型链中所有的属性</tspan></tspan></text></g></g><g id="28290e0d9639"><rect x="616.0000305175781" y="3563.0001525878906" rx="5px" ry="5px" width="113" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="626.0000305175781" y="3578.2001525878904"><tspan>Object.keys(obj)</tspan></tspan></text></g></g><g id="b31952c843ce"><rect x="764.5989685058594" y="3563.0001525878906" rx="5px" ry="5px" width="266" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="774.5989685058594" y="3578.2001525878904"><tspan>此方法可以只读取当前对象的属性, 不读取原型</tspan></tspan></text></g></g><g id="d08ec6693c32"><rect x="429.0000305175781" y="3617.0001525878906" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="439.0000305175781" y="3632.2001525878904"><tspan>应用场景</tspan></tspan></text></g></g><g id="4aa3e1f2f3c8"><rect x="533.0000305175781" y="3599.0001525878906" rx="5px" ry="5px" width="475" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="543.0000305175781" y="3614.2001525878904"><tspan>对象的方法, 应该在 原型中声明, 这样可以防止每次构造函数运行, 都重新声明新的方法</tspan></tspan></text></g></g><g id="210959f41f1c"><rect x="533.0000305175781" y="3635.0001525878906" rx="5px" ry="5px" width="309" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="543.0000305175781" y="3650.2001525878904"><tspan>向系统提供的构造函数中, 注入新的方法. 实现扩展操作</tspan></tspan></text></g></g><g id="6a59993c6924"><rect x="429.0000305175781" y="3716.5001525878906" rx="5px" ry="5px" width="104" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="439.0000305175781" y="3731.7001525878904"><tspan>操作原型的方法</tspan></tspan></text></g></g><g id="fe47e86e161d"><rect x="569.0000305175781" y="3698.5001525878906" rx="5px" ry="5px" width="230" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="579.0000305175781" y="3713.7001525878904"><tspan>Object.setPrototypeOf(obj, 原型对象)</tspan></tspan></text></g></g><g id="62c72d055d4a"><rect x="834.5104064941406" y="3671.0001525878906" rx="5px" ry="5px" width="176" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="844.5104064941406" y="3686.2001525878904"><tspan>为某个对象单独指定原型对象</tspan></tspan></text></g></g><g id="669131b53085"><rect x="834.5104064941406" y="3707.0001525878906" rx="5px" ry="5px" width="159" height="47" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="844.5104064941406" y="3722.2001525878904"><tspan>相当于:</tspan></tspan><tspan x="844.5104064941406" y="3738.2001525878904"><tspan>obj.__proto__ = 原型对象</tspan></tspan></text></g></g><g id="65e15f617b35"><rect x="569.0000305175781" y="3762.000160217285" rx="5px" ry="5px" width="192" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="579.0000305175781" y="3777.200160217285"><tspan>构造函数.prototype = 原型对象</tspan></tspan></text></g></g><g id="98b890d97ae5"><rect x="797.1615295410156" y="3762.000160217285" rx="5px" ry="5px" width="128" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="807.1615295410156" y="3777.200160217285"><tspan>为构造函数指定原型</tspan></tspan></text></g></g><g id="15219cf3b5b1"><rect x="343.0000305175781" y="4229.500183105469" rx="5px" ry="5px" width="128" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="4244.700183105469"><tspan>对象属性的精确设置</tspan></tspan></text></g></g><g id="e96cd08ab516"><rect x="507.0000305175781" y="3979.0001678466797" rx="5px" ry="5px" width="223" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="517.0000305175781" y="3994.2001678466795"><tspan>每个对象的属性都具有 5个具体配置项</tspan></tspan></text></g></g><g id="53bffdd737f6"><rect x="765.5885314941406" y="3798.000160217285" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="775.5885314941406" y="3813.200160217285"><tspan>value</tspan></tspan></text></g></g><g id="0a8131742303"><rect x="851.9166564941406" y="3798.000160217285" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="861.9166564941406" y="3813.200160217285"><tspan>默认值</tspan></tspan></text></g></g><g id="fbf5a8a85d64"><rect x="765.5885314941406" y="3834.000160217285" rx="5px" ry="5px" width="66" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="775.5885314941406" y="3849.200160217285"><tspan>writable</tspan></tspan></text></g></g><g id="2ef1243a7eed"><rect x="867.6094055175781" y="3834.000160217285" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="877.6094055175781" y="3849.200160217285"><tspan>可写</tspan></tspan></text></g></g><g id="2695cfabcc90"><rect x="765.5885314941406" y="3870.000162124634" rx="5px" ry="5px" width="82" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="775.5885314941406" y="3885.2001621246336"><tspan>enumerate</tspan></tspan></text></g></g><g id="850a567684f9"><rect x="883.7344055175781" y="3870.000162124634" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="893.7344055175781" y="3885.2001621246336"><tspan>可遍历</tspan></tspan></text></g></g><g id="1a19ae81a1ae"><rect x="765.5885314941406" y="3943.0001640319824" rx="5px" ry="5px" width="92" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="775.5885314941406" y="3958.2001640319822"><tspan>configurable</tspan></tspan></text></g></g><g id="cf1c704756bb"><rect x="893.9375305175781" y="3906.0001640319824" rx="5px" ry="5px" width="110" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="903.9375305175781" y="3921.2001640319822"><tspan>可重新配置, 删除</tspan></tspan></text></g></g><g id="2eea915827e7"><rect x="893.9375305175781" y="3942.0001640319824" rx="5px" ry="5px" width="238" height="66" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="903.9375305175781" y="3957.2001640319822"><tspan>不可重新配置 指的是 权利不可放大, 例如</tspan></tspan><tspan x="903.9375305175781" y="3973.2001640319822"><tspan>- 本来不可写, 改成可写 是禁止的</tspan></tspan><tspan x="903.9375305175781" y="3989.2001640319822"><tspan>- 本身可写, 改成不可写 是允许的</tspan></tspan></text></g></g><g id="a27156970586"><rect x="765.5885314941406" y="4052.0001678466797" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="775.5885314941406" y="4067.2001678466795"><tspan>get</tspan></tspan></text></g></g><g id="e402e46ff11f"><rect x="851.5885314941406" y="4016.0001678466797" rx="5px" ry="5px" width="169" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="861.5885314941406" y="4031.2001678466795"><tspan>getter方法, 读取属性时触发</tspan></tspan></text></g></g><g id="ae5da69337c8"><rect x="851.5885314941406" y="4070.0001678466797" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="861.5885314941406" y="4085.2001678466795"><tspan>场景</tspan></tspan></text></g></g><g id="ed752b74a2c4"><rect x="937.5885314941406" y="4052.0001678466797" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="947.5885314941406" y="4067.2001678466795"><tspan>计算属性</tspan></tspan></text></g></g><g id="0bf7ebb4e017"><rect x="937.5885314941406" y="4088.0001678466797" rx="5px" ry="5px" width="176" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="947.5885314941406" y="4103.2001678466795"><tspan>配合 set 实现属性的赋值监听</tspan></tspan></text></g></g><g id="342b5e78edcc"><rect x="765.5885314941406" y="4142.00016784668" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="775.5885314941406" y="4157.200183105469"><tspan>set</tspan></tspan></text></g></g><g id="8b8451c915cb"><rect x="851.5885314941406" y="4124.00016784668" rx="5px" ry="5px" width="179" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="861.5885314941406" y="4139.2001678466795"><tspan>setter方法, 向属性赋值时触发</tspan></tspan></text></g></g><g id="d76755ae18f4"><rect x="851.5885314941406" y="4160.000183105469" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="861.5885314941406" y="4175.200183105469"><tspan>场景</tspan></tspan></text></g></g><g id="54b959951aa2"><rect x="937.5885314941406" y="4160.000183105469" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="947.5885314941406" y="4175.200183105469"><tspan>赋值监听</tspan></tspan></text></g></g><g id="e75251f38cd1"><rect x="507.0000305175781" y="4214.000183105469" rx="5px" ry="5px" width="128" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="517.0000305175781" y="4229.200183105469"><tspan>关于配置项的默认值</tspan></tspan></text></g></g><g id="c6a75a33b99d"><rect x="671.0000305175781" y="4196.000183105469" rx="5px" ry="5px" width="140" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="681.0000305175781" y="4211.200183105469"><tspan>直接在对象中声明属性</tspan></tspan></text></g></g><g id="01e86969bee5"><rect x="847.0000305175781" y="4196.000183105469" rx="5px" ry="5px" width="129" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="857.0000305175781" y="4211.200183105469"><tspan>可写, 可遍历, 可配置</tspan></tspan></text></g></g><g id="31ef4471ed89"><rect x="671.0000305175781" y="4232.000183105469" rx="5px" ry="5px" width="128" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="681.0000305175781" y="4247.200183105469"><tspan>利用方法声明新属性</tspan></tspan></text></g></g><g id="0a5c36c6016b"><rect x="835.0000305175781" y="4232.000183105469" rx="5px" ry="5px" width="165" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="845.0000305175781" y="4247.200183105469"><tspan>不可写, 不可遍历, 不可配置</tspan></tspan></text></g></g><g id="c1cbac594951"><rect x="507.0000305175781" y="4268.000183105469" rx="5px" ry="5px" width="92" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="517.0000305175781" y="4283.200183105469"><tspan>配置单个属性</tspan></tspan></text></g></g><g id="a3e33a110b37"><rect x="635.0000305175781" y="4268.000183105469" rx="5px" ry="5px" width="369" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="645.0000305175781" y="4283.200183105469"><tspan>Object.defineProperty(对象, "属性名", {配置项: 值, 配置项:值,...})</tspan></tspan></text></g></g><g id="731cb2fbe20d"><rect x="507.0000305175781" y="4380.000183105469" rx="5px" ry="5px" width="92" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="517.0000305175781" y="4395.200183105469"><tspan>配置多个属性</tspan></tspan></text></g></g><g id="81bf8676b743"><rect x="635.0000305175781" y="4304.000183105469" rx="5px" ry="5px" width="194" height="180" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="645.0000305175781" y="4319.200183105469"><tspan>Object.defineProperties(对象, {</tspan></tspan><tspan x="645.0000305175781" y="4335.200183105469"><tspan>   属性名:{</tspan></tspan><tspan x="645.0000305175781" y="4351.200183105469"><tspan>        配置项:值,</tspan></tspan><tspan x="645.0000305175781" y="4367.200183105469"><tspan>        配置项:值,</tspan></tspan><tspan x="645.0000305175781" y="4383.200183105469"><tspan>   },</tspan></tspan><tspan x="645.0000305175781" y="4399.200183105469"><tspan>   属性名:{</tspan></tspan><tspan x="645.0000305175781" y="4415.200183105469"><tspan>       ...</tspan></tspan><tspan x="645.0000305175781" y="4431.200183105469"><tspan>   }</tspan></tspan><tspan x="645.0000305175781" y="4447.200183105469"><tspan>})</tspan></tspan></text></g></g><g id="d4afe1b4995f"><rect x="507.0000305175781" y="4576.500183105469" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="517.0000305175781" y="4591.700183105469"><tspan>语法糖</tspan></tspan></text></g></g><g id="ff22c0822189"><rect x="599.0000305175781" y="4511.000183105469" rx="5px" ry="5px" width="55" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="609.0000305175781" y="4526.200183105469"><tspan>getter</tspan></tspan></text></g></g><g id="b14b8969bf79"><rect x="689.8177185058594" y="4492.000183105469" rx="5px" ry="5px" width="156" height="66" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="699.8177185058594" y="4507.200183105469"><tspan>var obj = {</tspan></tspan><tspan x="699.8177185058594" y="4523.200183105469"><tspan>  get 属性名(){ return ....}</tspan></tspan><tspan x="699.8177185058594" y="4539.200183105469"><tspan>}</tspan></tspan></text></g></g><g id="766ca9da3164"><rect x="599.0000305175781" y="4613.500183105469" rx="5px" ry="5px" width="53" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="609.0000305175781" y="4628.700183105469"><tspan>setter</tspan></tspan></text></g></g><g id="a986cf0f7aa3"><rect x="687.6979064941406" y="4566.000183105469" rx="5px" ry="5px" width="319" height="123" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="697.6979064941406" y="4581.200183105469"><tspan>var obj = {</tspan></tspan><tspan x="697.6979064941406" y="4597.200183105469"><tspan>   set 属性名(值){ this.__属性名= 值 },</tspan></tspan><tspan x="697.6979064941406" y="4613.200183105469"><tspan>   get 属性名(){  return this.__属性名 }</tspan></tspan><tspan x="697.6979064941406" y="4629.200183105469"><tspan>}</tspan></tspan><tspan x="697.6979064941406" y="4645.200183105469"><tspan> </tspan></tspan><tspan x="697.6979064941406" y="4661.200183105469"><tspan>Object.defineProperty(obj, '__属性名', {writable:true})</tspan></tspan></text></g></g><g id="132efdc46733"><rect x="343.0000305175781" y="4787.000183105469" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="4802.200183105469"><tspan>保护对象</tspan></tspan></text></g></g><g id="f187141e3f87"><rect x="447.0000305175781" y="4697.000183105469" rx="5px" ry="5px" width="198" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="4712.200183105469"><tspan>Object.preventExtensions(对象)</tspan></tspan></text></g></g><g id="024516b9c746"><rect x="680.5572814941406" y="4697.000183105469" rx="5px" ry="5px" width="104" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="690.5572814941406" y="4712.200183105469"><tspan>不能增加新属性</tspan></tspan></text></g></g><g id="8ac8ae001783"><rect x="447.0000305175781" y="4751.000183105469" rx="5px" ry="5px" width="115" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="4766.200183105469"><tspan>Object.seal(对象)</tspan></tspan></text></g></g><g id="113b31aba7aa"><rect x="598.0416564941406" y="4733.000183105469" rx="5px" ry="5px" width="104" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="608.0416564941406" y="4748.200183105469"><tspan>不能增加新属性</tspan></tspan></text></g></g><g id="d81d9437b27b"><rect x="598.0416564941406" y="4769.000183105469" rx="5px" ry="5px" width="116" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="608.0416564941406" y="4784.200183105469"><tspan>不能删除已有属性</tspan></tspan></text></g></g><g id="85d2814a302b"><rect x="447.0000305175781" y="4841.000183105469" rx="5px" ry="5px" width="128" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="4856.200183105469"><tspan>Object.freeze(对象)</tspan></tspan></text></g></g><g id="d53e94eddda1"><rect x="610.9219055175781" y="4805.000183105469" rx="5px" ry="5px" width="104" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="620.9219055175781" y="4820.200183105469"><tspan>不能增加新属性</tspan></tspan></text></g></g><g id="ad9aef304ff3"><rect x="610.9219055175781" y="4841.000183105469" rx="5px" ry="5px" width="116" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="620.9219055175781" y="4856.200183105469"><tspan>不能删除已有属性</tspan></tspan></text></g></g><g id="bbdbd06c517f"><rect x="610.9219055175781" y="4877.000183105469" rx="5px" ry="5px" width="140" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="620.9219055175781" y="4892.200183105469"><tspan>不能修改已有属性的值</tspan></tspan></text></g></g><g id="e0b0cad16b1e"><rect x="343.0000305175781" y="5352.500244140625" rx="5px" ry="5px" width="71" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="5367.700244140625"><tspan>class语法</tspan></tspan></text></g></g><g id="eb581cb2f9d8"><rect x="449.9531555175781" y="4913.000183105469" rx="5px" ry="5px" width="327" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="459.9531555175781" y="4928.200244140625"><tspan>模仿 JAVA 的面向对象语法, 本质是构造函数的语法糖写法</tspan></tspan></text></g></g><g id="980bfd349845"><rect x="449.9531555175781" y="5006.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="459.9531555175781" y="5021.200244140625"><tspan>基础写法</tspan></tspan></text></g></g><g id="4469c324d606"><rect x="553.9531555175781" y="4949.000244140625" rx="5px" ry="5px" width="168" height="142" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="563.9531555175781" y="4964.200244140625"><tspan>class ClassName{</tspan></tspan><tspan x="563.9531555175781" y="4980.200244140625"><tspan>  constructor(参数, 参数...){</tspan></tspan><tspan x="563.9531555175781" y="4996.200244140625"><tspan>    this.属性名=参数;</tspan></tspan><tspan x="563.9531555175781" y="5012.200244140625"><tspan>  }</tspan></tspan><tspan x="563.9531555175781" y="5028.200244140625"><tspan> </tspan></tspan><tspan x="563.9531555175781" y="5044.200244140625"><tspan>  方法名(){}</tspan></tspan><tspan x="563.9531555175781" y="5060.200244140625"><tspan>}</tspan></tspan></text></g></g><g id="ca4db60ae1b3"><rect x="449.9531555175781" y="5193.000244140625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="459.9531555175781" y="5208.200244140625"><tspan>静态变量</tspan></tspan></text></g></g><g id="d875157297a2"><rect x="553.9531555175781" y="5099.000244140625" rx="5px" ry="5px" width="168" height="180" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="563.9531555175781" y="5114.200244140625"><tspan>class ClassName{</tspan></tspan><tspan x="563.9531555175781" y="5130.200244140625"><tspan>  static 属性名 = 值;</tspan></tspan><tspan x="563.9531555175781" y="5146.200244140625"><tspan> </tspan></tspan><tspan x="563.9531555175781" y="5162.200244140625"><tspan>  constructor(参数, 参数...){</tspan></tspan><tspan x="563.9531555175781" y="5178.200244140625"><tspan>    this.属性名=参数;</tspan></tspan><tspan x="563.9531555175781" y="5194.200244140625"><tspan>  }</tspan></tspan><tspan x="563.9531555175781" y="5210.200244140625"><tspan> </tspan></tspan><tspan x="563.9531555175781" y="5226.200244140625"><tspan>  方法名(){}</tspan></tspan><tspan x="563.9531555175781" y="5242.200244140625"><tspan>}</tspan></tspan></text></g></g><g id="b79df5824381"><rect x="553.9531555175781" y="5287.000244140625" rx="5px" ry="5px" width="140" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="563.9531555175781" y="5302.200244140625"><tspan>静态变量需要类名调用</tspan></tspan></text></g></g><g id="10405e6ad8cc"><rect x="729.9531555175781" y="5287.000244140625" rx="5px" ry="5px" width="83" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="739.9531555175781" y="5302.200244140625"><tspan>类名.属性名</tspan></tspan></text></g></g><g id="a18d0216e1a3"><rect x="449.9531555175781" y="5417.000244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="459.9531555175781" y="5432.200244140625"><tspan>继承</tspan></tspan></text></g></g><g id="6ab85b0ba999"><rect x="535.9531555175781" y="5323.000244140625" rx="5px" ry="5px" width="194" height="180" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="545.9531555175781" y="5338.200244140625"><tspan>class ClassName extends 父类{</tspan></tspan><tspan x="545.9531555175781" y="5354.200244140625"><tspan>  static 属性名 = 值;</tspan></tspan><tspan x="545.9531555175781" y="5370.200244140625"><tspan> </tspan></tspan><tspan x="545.9531555175781" y="5386.200244140625"><tspan>  constructor(参数, 参数...){</tspan></tspan><tspan x="545.9531555175781" y="5402.200244140625"><tspan>    this.属性名=参数;</tspan></tspan><tspan x="545.9531555175781" y="5418.200244140625"><tspan>  }</tspan></tspan><tspan x="545.9531555175781" y="5434.200244140625"><tspan> </tspan></tspan><tspan x="545.9531555175781" y="5450.200244140625"><tspan>  方法名(){}</tspan></tspan><tspan x="545.9531555175781" y="5466.200244140625"><tspan>}</tspan></tspan></text></g></g><g id="82137af4d8f3"><rect x="535.9531555175781" y="5511.000244140625" rx="5px" ry="5px" width="212" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="545.9531555175781" y="5526.200244140625"><tspan>子类将会具有父类的所有属性和方法</tspan></tspan></text></g></g><g id="0c7dccc0c2eb"><rect x="449.9531555175781" y="5669.500244140625" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="459.9531555175781" y="5684.700244140625"><tspan>重写</tspan></tspan></text></g></g><g id="b0b52594b2e3"><rect x="535.9531555175781" y="5547.000244140625" rx="5px" ry="5px" width="406" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="545.9531555175781" y="5562.200244140625"><tspan>子类可以书写与父类中 同名的方法和属性, 此时调用属性 会遵循就近原则</tspan></tspan></text></g></g><g id="e1b411a0e3e4"><rect x="535.9531555175781" y="5687.500244140625" rx="5px" ry="5px" width="416" height="28" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="545.9531555175781" y="5702.700244140625"><tspan>super关键词:  利用此关键词可以在重写的方法中, 调用父类中被重写的方法</tspan></tspan></text></g></g><g id="62a0d32eae27"><rect x="988.3906555175781" y="5583.000244140625" rx="5px" ry="5px" width="194" height="237" style="fill: rgb(254, 240, 201); stroke:rgb(254, 240, 201);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="998.3906555175781" y="5598.200244140625"><tspan>class ClassName extends 父类{</tspan></tspan><tspan x="998.3906555175781" y="5614.200244140625"><tspan>  static 属性名 = 值;</tspan></tspan><tspan x="998.3906555175781" y="5630.200244140625"><tspan> </tspan></tspan><tspan x="998.3906555175781" y="5646.200244140625"><tspan>  constructor(参数, 参数...){</tspan></tspan><tspan x="998.3906555175781" y="5662.200244140625"><tspan>    super(xx, xx)</tspan></tspan><tspan x="998.3906555175781" y="5678.200244140625"><tspan>    this.属性名=参数;</tspan></tspan><tspan x="998.3906555175781" y="5694.200244140625"><tspan>  }</tspan></tspan><tspan x="998.3906555175781" y="5710.200244140625"><tspan> </tspan></tspan><tspan x="998.3906555175781" y="5726.200244140625"><tspan>  方法名(){</tspan></tspan><tspan x="998.3906555175781" y="5742.200244140625"><tspan>    super.方法名()</tspan></tspan><tspan x="998.3906555175781" y="5758.200244140625"><tspan>  }</tspan></tspan><tspan x="998.3906555175781" y="5774.200244140625"><tspan>}</tspan></tspan></text></g></g><g id="6761a98f1b35"><rect x="229" y="1555.33349609375" rx="5px" ry="5px" width="52" height="35" style="fill: rgb(204,229,255); stroke:rgb(204,229,255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="240" y="1575.73349609375"><tspan>函数</tspan></tspan></text></g></g><g id="0a4926c45808"><rect x="317.0000305175781" y="921" rx="5px" ry="5px" width="389" height="85" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="327.0000305175781" y="936.2"><tspan>函数是最基本的封装特性的体现. </tspan></tspan><tspan x="327.0000305175781" y="952.2"><tspan>主要目的是: 复用 代码</tspan></tspan><tspan x="327.0000305175781" y="968.2"><tspan>把一大段代码封装在{}中, 然后起个名字, 以后通过名字就可以调用函数</tspan></tspan><tspan x="327.0000305175781" y="984.2"><tspan>利用 参数, 可以实现{}中代码的变化</tspan></tspan></text></g></g><g id="ddbf4cc3ca9c"><rect x="317.0000305175781" y="1060.5" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="327.0000305175781" y="1075.7"><tspan>声明方式</tspan></tspan></text></g></g><g id="2679d7f2fff9"><rect x="421.0000305175781" y="1042.5" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="431.0000305175781" y="1057.7"><tspan>字面量</tspan></tspan></text></g></g><g id="b6a4e6150866"><rect x="513.0000305175781" y="1014" rx="5px" ry="5px" width="152" height="85" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="523.0000305175781" y="1029.2"><tspan>function 函数名(参数...){</tspan></tspan><tspan x="523.0000305175781" y="1045.2"><tspan>   函数体...</tspan></tspan><tspan x="523.0000305175781" y="1061.2"><tspan>   return xxx</tspan></tspan><tspan x="523.0000305175781" y="1077.2"><tspan>}</tspan></tspan></text></g></g><g id="09718c1f05f8"><rect x="421.0000305175781" y="1107" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="431.0000305175781" y="1122.2"><tspan>构造</tspan></tspan></text></g></g><g id="304d067d9cd8"><rect x="507.0000305175781" y="1107" rx="5px" ry="5px" width="274" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="517.0000305175781" y="1122.2"><tspan>var 变量名 = new Function("参数"..., "函数体")</tspan></tspan></text></g></g><g id="d9a53383ea13"><rect x="317.0000305175781" y="1234" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="327.0000305175781" y="1249.2"><tspan>参数</tspan></tspan></text></g></g><g id="ba0cb6d10910"><rect x="403.0000305175781" y="1143" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="1158.2"><tspan>单参数</tspan></tspan></text></g></g><g id="12ce5c66cd4b"><rect x="495.0000305175781" y="1143" rx="5px" ry="5px" width="147" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="505.0000305175781" y="1158.2"><tspan>function 函数名(参数){}</tspan></tspan></text></g></g><g id="d4e306811c24"><rect x="403.0000305175781" y="1179" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="1194.2"><tspan>多参数</tspan></tspan></text></g></g><g id="27392c7d65ab"><rect x="495.0000305175781" y="1179" rx="5px" ry="5px" width="208" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="505.0000305175781" y="1194.2"><tspan>function 函数名(参数, 参数, 参数){}</tspan></tspan></text></g></g><g id="70e2320bd270"><rect x="403.0000305175781" y="1234" rx="5px" ry="5px" width="104" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="1249.2"><tspan>不固定数量参数</tspan></tspan></text></g></g><g id="c9f550bb6058"><rect x="543.0000305175781" y="1215" rx="5px" ry="5px" width="119" height="66" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="553.0000305175781" y="1230.2"><tspan>function 函数名(){</tspan></tspan><tspan x="553.0000305175781" y="1246.2"><tspan> arguments</tspan></tspan><tspan x="553.0000305175781" y="1262.2"><tspan>}</tspan></tspan></text></g></g><g id="6808b167efb8"><rect x="403.0000305175781" y="1289" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="1304.2"><tspan>剩余参数</tspan></tspan></text></g></g><g id="1d168a233e4f"><rect x="507.0000305175781" y="1289" rx="5px" ry="5px" width="217" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="517.0000305175781" y="1304.2"><tspan>function 函数名(参数, 参数, ...数组){}</tspan></tspan></text></g></g><g id="dfc620558fb8"><rect x="403.0000305175781" y="1325" rx="5px" ry="5px" width="116" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="1340.2"><tspan>带有默认值的参数</tspan></tspan></text></g></g><g id="7383d1fc8bd3"><rect x="555.0000305175781" y="1325" rx="5px" ry="5px" width="223" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="565.0000305175781" y="1340.2"><tspan>function 函数名(参数, 参数=默认值){}</tspan></tspan></text></g></g><g id="476fb0308ca7"><rect x="317.0000305175781" y="1451" rx="5px" ry="5px" width="82" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="327.0000305175781" y="1466.2"><tspan>arguments</tspan></tspan></text></g></g><g id="e96ac7b37cb1"><rect x="434.7604064941406" y="1361" rx="5px" ry="5px" width="394" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="444.7604064941406" y="1376.2"><tspan>每个函数都具有的一个 类数组 类型的变量, 其中存放了函数的所有参数</tspan></tspan></text></g></g><g id="bc0742e1f02f"><rect x="434.7604064941406" y="1397" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="444.7604064941406" y="1412.2"><tspan>类数组</tspan></tspan></text></g></g><g id="b7175db026e5"><rect x="526.7604064941406" y="1397" rx="5px" ry="5px" width="247" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="536.7604064941406" y="1412.2"><tspan>数组的结构  但是 没有数组类型的各种方法</tspan></tspan></text></g></g><g id="7b9b5e4b546b"><rect x="434.7604064941406" y="1487" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="444.7604064941406" y="1502.2"><tspan>属性</tspan></tspan></text></g></g><g id="80e1f70f5a9d"><rect x="520.7604064941406" y="1433" rx="5px" ry="5px" width="57" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="530.7604064941406" y="1448.2"><tspan>length</tspan></tspan></text></g></g><g id="2a79190aea8f"><rect x="613.6927185058594" y="1433" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="623.6927185058594" y="1448.2"><tspan>参数个数</tspan></tspan></text></g></g><g id="a38965256d4a"><rect x="520.7604064941406" y="1505" rx="5px" ry="5px" width="53" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="530.7604064941406" y="1520.2"><tspan>callee</tspan></tspan></text></g></g><g id="1b43a66da430"><rect x="609.4166564941406" y="1469" rx="5px" ry="5px" width="128" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="619.4166564941406" y="1484.2"><tspan>代表当前执行的函数</tspan></tspan></text></g></g><g id="80744a2396e0"><rect x="609.4166564941406" y="1505" rx="5px" ry="5px" width="367" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="619.4166564941406" y="1520.2"><tspan>在早期JS中, 使用此变量 在匿名函数中实现 自调用,  实现递归函数</tspan></tspan></text></g></g><g id="79a9a6fa79c5"><rect x="609.4166564941406" y="1541" rx="5px" ry="5px" width="371" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="619.4166564941406" y="1556.2"><tspan>在后期JS中, 通过 命名函数的自调用方式 实现递归.   callee 被废弃</tspan></tspan></text></g></g><g id="768f22adefeb"><rect x="317.0000305175781" y="1604.5" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="327.0000305175781" y="1619.7"><tspan>重载</tspan></tspan></text></g></g><g id="0b8da430d88a"><rect x="403.0000305175781" y="1577" rx="5px" ry="5px" width="539" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="1592.2"><tspan>此概念来自C语言, 目的是合并多个执行相似任务的函数, JS不提供特定书写方式, 需要我们自己解决</tspan></tspan></text></g></g><g id="00a18d4990ba"><rect x="403.0000305175781" y="1613" rx="5px" ry="5px" width="380" height="47" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="1628.2"><tspan>利用 arguments 接收函数参数,  通过判断 参数个数 或 类型的不同, </tspan></tspan><tspan x="413.0000305175781" y="1644.2"><tspan>在函数体内执行不同的逻辑操作</tspan></tspan></text></g></g><g id="2994fc514243"><rect x="317.0000305175781" y="1695.5" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="327.0000305175781" y="1710.7"><tspan>声明提升</tspan></tspan></text></g></g><g id="fb5a10850e60"><rect x="421.0000305175781" y="1668" rx="5px" ry="5px" width="328" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="431.0000305175781" y="1683.2"><tspan>字面量函数 和 var变量 的声明都会被提升到代码的最上方 </tspan></tspan></text></g></g><g id="af78f3bd07fe"><rect x="421.0000305175781" y="1704" rx="5px" ry="5px" width="445" height="47" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="431.0000305175781" y="1719.2"><tspan>本质是 JS编译器会 预编译代码, 先阅读一次代码找到所有 var变量 和 字面量函数</tspan></tspan><tspan x="431.0000305175781" y="1735.2"><tspan>然后才会正式执行剩余代码</tspan></tspan></text></g></g><g id="3ff1e91f6030"><rect x="317.0000305175781" y="1813" rx="5px" ry="5px" width="95" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="327.0000305175781" y="1828.2"><tspan>作用域 Scope</tspan></tspan></text></g></g><g id="a2960d7e837d"><rect x="447.5989685058594" y="1777" rx="5px" ry="5px" width="116" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.5989685058594" y="1792.2"><tspan>JS只有两个作用域</tspan></tspan></text></g></g><g id="1d99df1bef81"><rect x="599.2812805175781" y="1759" rx="5px" ry="5px" width="80" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="609.2812805175781" y="1774.2"><tspan>全局作用域</tspan></tspan></text></g></g><g id="bdea8622b0a3"><rect x="599.2812805175781" y="1795" rx="5px" ry="5px" width="80" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="609.2812805175781" y="1810.2"><tspan>函数作用域</tspan></tspan></text></g></g><g id="edf41307fed5"><rect x="447.5989685058594" y="1831" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.5989685058594" y="1846.2"><tspan>作用域链</tspan></tspan></text></g></g><g id="9c5a6f6ee20c"><rect x="551.5989685058594" y="1831" rx="5px" ry="5px" width="442" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="561.5989685058594" y="1846.2"><tspan>函数中, 使用一个变量, 会采用就近原则, 一层一层向上查找, 最终找到全局作用域</tspan></tspan></text></g></g><g id="f5af432b86e4"><rect x="447.5989685058594" y="1867.0001220703125" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.5989685058594" y="1882.2001220703125"><tspan>词法环境</tspan></tspan></text></g></g><g id="60d3b258a17e"><rect x="551.5989685058594" y="1867.0001220703125" rx="5px" ry="5px" width="420" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="561.5989685058594" y="1882.2001220703125"><tspan>JS的函数声明后, 会自动保存声明时所在的环境到 Scopes 变量中 : 作用域链</tspan></tspan></text></g></g><g id="2a4867780ce2"><rect x="317.0000305175781" y="2050.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="327.0000305175781" y="2065.2001220703123"><tspan>闭包</tspan></tspan></text></g></g><g id="ef0dc6d67b52"><rect x="403.0000305175781" y="1903.0001220703125" rx="5px" ry="5px" width="338" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="1918.2001220703125"><tspan>每个函数都是一个闭包, 函数声明时可以保存自身的词法环境</tspan></tspan></text></g></g><g id="64874ffe7cd7"><rect x="403.0000305175781" y="1939.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="1954.2001220703125"><tspan>用途</tspan></tspan></text></g></g><g id="6d7ea9aaad35"><rect x="489.0000305175781" y="1939.0001220703125" rx="5px" ry="5px" width="426" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="499.0000305175781" y="1954.2001220703125"><tspan>利用函数声明一个独立的作用域, 在作用域中声明变量 可以放置全局变量污染</tspan></tspan></text></g></g><g id="2cc2737dff1e"><rect x="403.0000305175781" y="2086.0001220703125" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="413.0000305175781" y="2101.2001220703123"><tspan>实现</tspan></tspan></text></g></g><g id="1c822df2d0a4"><rect x="489.0000305175781" y="1975.0001220703125" rx="5px" ry="5px" width="184" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="499.0000305175781" y="1990.2001220703125"><tspan>1. 声明函数, 在函数中声明变量</tspan></tspan></text></g></g><g id="1a7687e3edcb"><rect x="489.0000305175781" y="2011.0001220703125" rx="5px" ry="5px" width="294" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="499.0000305175781" y="2026.2001220703125"><tspan>2. 函数中声明其他函数等, 来使用 步骤1 声明的变量</tspan></tspan></text></g></g><g id="70a43e6c9771"><rect x="489.0000305175781" y="2047.0001220703125" rx="5px" ry="5px" width="362" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="499.0000305175781" y="2062.2001220703123"><tspan>3. 步骤2中声明的函数等, 必须保存在window中, 保障活在全局区</tspan></tspan></text></g></g><g id="d9b0a9c6174d"><rect x="489.0000305175781" y="2140.0001220703125" rx="5px" ry="5px" width="99" height="28" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="499.0000305175781" y="2155.2001220703123"><tspan>1个典型的写法</tspan></tspan></text></g></g><g id="1d7f3f96841c"><rect x="624.0416564941406" y="2083.0001220703125" rx="5px" ry="5px" width="154" height="142" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="634.0416564941406" y="2098.2001220703123"><tspan>(function(){</tspan></tspan><tspan x="634.0416564941406" y="2114.2001220703123"><tspan> var name = '222';</tspan></tspan><tspan x="634.0416564941406" y="2130.2001220703123"><tspan>  </tspan></tspan><tspan x="634.0416564941406" y="2146.2001220703123"><tspan> window.a = function(){</tspan></tspan><tspan x="634.0416564941406" y="2162.2001220703123"><tspan>   console.log(name) </tspan></tspan><tspan x="634.0416564941406" y="2178.2001220703123"><tspan> }</tspan></tspan><tspan x="634.0416564941406" y="2194.2001220703123"><tspan>})()</tspan></tspan></text></g></g><g id="1bf48a090f90"><rect x="813.6354064941406" y="2103.0001220703125" rx="5px" ry="5px" width="314" height="47" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="823.6354064941406" y="2118.2001220703123"><tspan>匿名函数自调用不是必备的, 只是为了节省几行代码而已</tspan></tspan><tspan x="823.6354064941406" y="2134.2001220703123"><tspan>完全可以先声明 命名函数, 然后在下方 调用命名函数</tspan></tspan></text></g></g><g id="db60ec6e5742"><rect x="813.6354064941406" y="2158.0001220703125" rx="5px" ry="5px" width="362" height="47" style="fill: rgb(220, 220, 220); stroke:rgb(220, 220, 220);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="823.6354064941406" y="2173.2001220703123"><tspan>window.a  就是把函数保存到 全局区, 这样函数内部使用name , </tspan></tspan><tspan x="823.6354064941406" y="2189.2001220703123"><tspan>name变量所在词法环境就能保存在 a 中</tspan></tspan></text></g></g><g id="fd3958d01ca2"><rect x="229" y="841.33349609375" rx="5px" ry="5px" width="102" height="35" style="fill: rgb(255,230,204); stroke:rgb(255,230,204);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="240" y="861.73349609375"><tspan>window对象</tspan></tspan></text></g></g><g id="e396d96dccf4"><rect x="367.3177185058594" y="827" rx="5px" ry="5px" width="411" height="28" style="fill: rgb(229, 204, 255); stroke:rgb(229, 204, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="377.3177185058594" y="842.2"><tspan>网页具备一个 window 对象, 所有JS执行的内容都是存储在window对象中</tspan></tspan></text></g></g><g id="18892908a7c1"><rect x="367.3177185058594" y="863" rx="5px" ry="5px" width="315" height="28" style="fill: rgb(229, 204, 255); stroke:rgb(229, 204, 255);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="377.3177185058594" y="878.2"><tspan>后期出现了 块级作用域, 才支持声明window以外的对象</tspan></tspan></text></g></g><g id="eb0b8aeaad60"><rect x="229" y="395.83349609375" rx="5px" ry="5px" width="78" height="35" style="fill: rgb(255,204,204); stroke:rgb(255,204,204);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="14px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="240" y="416.23349609375"><tspan>正则对象</tspan></tspan></text></g></g><g id="7886936dad38"><rect x="343.0000305175781" y="66" rx="5px" ry="5px" width="192" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="81.2"><tspan>正则表达式 Regular Expression</tspan></tspan></text></g></g><g id="2be77cb38052"><rect x="571.2864685058594" y="30" rx="5px" ry="5px" width="230" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="581.2864685058594" y="45.2"><tspan>通过一定的规则, 对字符串进行模糊匹配</tspan></tspan></text></g></g><g id="2a0a881af032"><rect x="571.2864685058594" y="84" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="581.2864685058594" y="99.2"><tspan>元字符</tspan></tspan></text></g></g><g id="414c556586f6"><rect x="663.2864685058594" y="66" rx="5px" ry="5px" width="284" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="673.2864685058594" y="81.2"><tspan>正则表达式规定的一系列带有固定含义的字符组合</tspan></tspan></text></g></g><g id="b83102335416"><rect x="663.2864685058594" y="102" rx="5px" ry="5px" width="515" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="673.2864685058594" y="117.2"><tspan>https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</tspan></tspan></text></g></g><g id="a79826b23fff"><rect x="343.0000305175781" y="192" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="207.2"><tspan>字面量</tspan></tspan></text></g></g><g id="d4cc786fe3e0"><rect x="435.0000305175781" y="138" rx="5px" ry="5px" width="126" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="445.0000305175781" y="153.2"><tspan>/正则表达式/修饰符</tspan></tspan></text></g></g><g id="11130bb15d1c"><rect x="435.0000305175781" y="192" rx="5px" ry="5px" width="56" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="445.0000305175781" y="207.2"><tspan>修饰符</tspan></tspan></text></g></g><g id="2e252d9e31ec"><rect x="527.0000305175781" y="174" rx="5px" ry="5px" width="87" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="537.0000305175781" y="189.2"><tspan>i 忽略大小写</tspan></tspan></text></g></g><g id="f114f0f03238"><rect x="527.0000305175781" y="210" rx="5px" ry="5px" width="79" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="537.0000305175781" y="225.2"><tspan>g 全局匹配</tspan></tspan></text></g></g><g id="99026425f38b"><rect x="435.0000305175781" y="246" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="445.0000305175781" y="261.2"><tspan>场景</tspan></tspan></text></g></g><g id="fefd1fb3b3c1"><rect x="521.0000305175781" y="246" rx="5px" ry="5px" width="254" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="531.0000305175781" y="261.2"><tspan>适合正则不变的场景, 用于验证变化的字符串</tspan></tspan></text></g></g><g id="1f52f01674f7"><rect x="343.0000305175781" y="381.5" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="396.7"><tspan>构造方式</tspan></tspan></text></g></g><g id="092ec94f7882"><rect x="447.0000305175781" y="282" rx="5px" ry="5px" width="221" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="297.2"><tspan>new RegExp("正则表达式", "修饰符")</tspan></tspan></text></g></g><g id="a53d6550077e"><rect x="447.0000305175781" y="381.5" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="396.7"><tspan>注意事项</tspan></tspan></text></g></g><g id="b6c4a5152886"><rect x="551.0000305175781" y="318" rx="5px" ry="5px" width="287" height="47" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="561.0000305175781" y="333.2"><tspan>\ 是JS字符串的转义符, 会把一些特定字符进行转移</tspan></tspan><tspan x="561.0000305175781" y="349.2"><tspan>非特定字符则会转为其本身</tspan></tspan></text></g></g><g id="09c0d7a2f035"><rect x="551.0000305175781" y="409" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="561.0000305175781" y="424.2"><tspan>例如</tspan></tspan></text></g></g><g id="5b4a8b8ed2b8"><rect x="637.0000305175781" y="373" rx="5px" ry="5px" width="96" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="647.0000305175781" y="388.2"><tspan>'\d' 转义为 'd'</tspan></tspan></text></g></g><g id="b7a9db4387e1"><rect x="637.0000305175781" y="409" rx="5px" ry="5px" width="82" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="647.0000305175781" y="424.2"><tspan>'\t' 就是 '\t'</tspan></tspan></text></g></g><g id="9ddd706bd68f"><rect x="637.0000305175781" y="445" rx="5px" ry="5px" width="82" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="647.0000305175781" y="460.2"><tspan>'\\' 转为  '\'</tspan></tspan></text></g></g><g id="87e10c3090a1"><rect x="447.0000305175781" y="481" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="496.2"><tspan>场景</tspan></tspan></text></g></g><g id="d51ef0acb6b5"><rect x="533.0000305175781" y="481" rx="5px" ry="5px" width="342" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="543.0000305175781" y="496.2"><tspan>适合需要实时生成正则对象的场景, 例如 用户录入正则表达式</tspan></tspan></text></g></g><g id="9c36d4c2f39f"><rect x="343.0000305175781" y="643" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="353.0000305175781" y="658.2"><tspan>相关方法</tspan></tspan></text></g></g><g id="bea9a6665b0b"><rect x="447.0000305175781" y="517" rx="5px" ry="5px" width="127" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="532.2"><tspan>字符串.match(正则)</tspan></tspan></text></g></g><g id="74c2fb0d357f"><rect x="609.6614685058594" y="517" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="619.6614685058594" y="532.2"><tspan>查找</tspan></tspan></text></g></g><g id="b97b1162b71c"><rect x="447.0000305175781" y="571" rx="5px" ry="5px" width="199" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="586.2"><tspan>字符串.replace(正则, 要替换的值)</tspan></tspan></text></g></g><g id="b949c5072450"><rect x="682.0520935058594" y="553" rx="5px" ry="5px" width="112" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="692.0520935058594" y="568.2"><tspan>()是正则的捕获组</tspan></tspan></text></g></g><g id="c4d9828b19c5"><rect x="682.0520935058594" y="589" rx="5px" ry="5px" width="201" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="692.0520935058594" y="604.2"><tspan>$n 可以代表第n个捕获组捕捉的值</tspan></tspan></text></g></g><g id="ed534fc55398"><rect x="447.0000305175781" y="643" rx="5px" ry="5px" width="112" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="658.2"><tspan>正则.test(字符串)</tspan></tspan></text></g></g><g id="a31620073f25"><rect x="595.2135314941406" y="625" rx="5px" ry="5px" width="68" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="605.2135314941406" y="640.2"><tspan>格式验证</tspan></tspan></text></g></g><g id="dcac08eff2a6"><rect x="595.2135314941406" y="661" rx="5px" ry="5px" width="387" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="605.2135314941406" y="676.2"><tspan>用作格式验证的正则, 必须带 ^ 和 $ 在两侧, 代表字符串的开头与结尾</tspan></tspan></text></g></g><g id="9dc27d8e65a6"><rect x="447.0000305175781" y="733" rx="5px" ry="5px" width="81" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="457.0000305175781" y="748.2"><tspan>正则.exec()</tspan></tspan></text></g></g><g id="a59667c5cfdc"><rect x="563.6250305175781" y="697" rx="5px" ry="5px" width="417" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="573.6250305175781" y="712.2"><tspan>所有正则的根源方法, 可以通过封装函数的方式, 制作出所有学过的正则方法</tspan></tspan></text></g></g><g id="994220ad648f"><rect x="563.6250305175781" y="751" rx="5px" ry="5px" width="50" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="573.6250305175781" y="766.2"><tspan>特点</tspan></tspan></text></g></g><g id="6f82d19ec6bf"><rect x="649.6250305175781" y="733" rx="5px" ry="5px" width="388" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="659.6250305175781" y="748.2"><tspan>每次执行, 都会查找1条符合正则要求的内容, 最后查不到时,则返回null</tspan></tspan></text></g></g><g id="cab4e4777575"><rect x="649.6250305175781" y="769" rx="5px" ry="5px" width="288" height="28" style="fill: rgb(193, 255, 193); stroke:rgb(193, 255, 193);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="12px" font-weight="normal" fill="rgb(103, 103, 103)"><tspan x="659.6250305175781" y="784.2"><tspan>利用 do...while... 循环方式, 可以实现自动全局查找</tspan></tspan></text></g></g><g transform="translate(229, 7800.000244140625)" id="sdjakdjak0"><g id="subline_7afc3dc4611a" transform="translate(0.5,-1.5)"><path id="line_a678d446d36e" d="M 76 340 L 94 340 L 94 18 A 4 4 0 0 1 98 14 L 112.45834350585938 14" p="7afc3dc4611a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_136dcb4db01b" d="M 76 340 L 94 340 L 94 73 A 4 4 0 0 1 98 69 L 112.45834350585938 69" p="7afc3dc4611a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_478210cc3472" d="M 257.4583435058594 69 L 276 69 L 276 69 L 293.8489685058594 69" p="136dcb4db01b" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0bdecb2cb3bd" d="M 76 340 L 94 340 L 94 221 A 4 4 0 0 1 98 217 L 112.45834350585938 217" p="7afc3dc4611a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8b94b12f5d9f" d="M 76 340 L 94 340 L 94 400 A 4 4 0 0 0 98 404 L 112.45834350585938 404" p="7afc3dc4611a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1d07d6712f64" d="M 162.45834350585938 404 L 181 404 L 181 404 L 198.45834350585938 404" p="8b94b12f5d9f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_88ad12af4fa6" d="M 76 340 L 94 340 L 94 577 A 4 4 0 0 0 98 581 L 112.45834350585938 581" p="7afc3dc4611a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_90a2581a3a4a" d="M 168.45834350585938 581 L 187 581 L 187 501 A 4 4 0 0 1 191 497 L 204.45834350585938 497" p="88ad12af4fa6" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_95e3079982c6" d="M 300.4583435058594 497 L 319 497 L 319 497 L 336.3645935058594 497" p="90a2581a3a4a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9c94f202f3bc" d="M 168.45834350585938 581 L 187 581 L 187 595 A 4 4 0 0 0 191 599 L 204.45834350585938 599" p="88ad12af4fa6" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,-0.5)"></g><g class="svg-summary-con" transform="translate(0.5,-0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,-0.5)"></g></g><g transform="translate(229, 6417.000244140625)" id="sdjakdjak1"><g id="subline_bba8e8ce3291" transform="translate(0.5,-1.5)"><path id="line_48a5c91a4aea" d="M 64 677 L 82 677 L 82 163 A 4 4 0 0 1 86 159 L 100.00003051757812 159" p="bba8e8ce3291" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_78cdfa0c0e1e" d="M 168.00003051757812 159 L 187 159 L 187 37 A 4 4 0 0 1 191 33 L 204.00003051757812 33" p="48a5c91a4aea" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_107435270fc4" d="M 254.00003051757812 33 L 273 33 L 273 33 L 290.0000305175781 33" p="78cdfa0c0e1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3318ed0ca872" d="M 168.00003051757812 159 L 187 159 L 187 146 A 4 4 0 0 1 191 142 L 204.00003051757812 142" p="48a5c91a4aea" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_22b1df69d652" d="M 254.00003051757812 142 L 273 142 L 273 92 A 4 4 0 0 1 277 88 L 290.0000305175781 88" p="3318ed0ca872" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3347154be2bb" d="M 254.00003051757812 142 L 273 142 L 273 128 A 4 4 0 0 1 277 124 L 290.0000305175781 124" p="3318ed0ca872" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_91c03156cf52" d="M 254.00003051757812 142 L 273 142 L 273 156 A 4 4 0 0 0 277 160 L 290.0000305175781 160" p="3318ed0ca872" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_61c132168034" d="M 254.00003051757812 142 L 273 142 L 273 192 A 4 4 0 0 0 277 196 L 290.0000305175781 196" p="3318ed0ca872" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dcd2012c410c" d="M 168.00003051757812 159 L 187 159 L 187 264 A 4 4 0 0 0 191 268 L 204.00003051757812 268" p="48a5c91a4aea" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_80f9f43756d2" d="M 255.00003051757812 268 L 274 268 L 274 236 A 4 4 0 0 1 278 232 L 291.0677185058594 232" p="dcd2012c410c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d5d67912d404" d="M 255.00003051757812 268 L 274 268 L 274 268 L 291.0677185058594 268" p="dcd2012c410c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_477093f07245" d="M 255.00003051757812 268 L 274 268 L 274 300 A 4 4 0 0 0 278 304 L 291.0677185058594 304" p="dcd2012c410c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_61374b46a9ca" d="M 64 677 L 82 677 L 82 470 A 4 4 0 0 1 86 466 L 100.00003051757812 466" p="bba8e8ce3291" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d7c68fd60cd3" d="M 249.00003051757812 466 L 268 466 L 268 380 A 4 4 0 0 1 272 376 L 284.6094055175781 376" p="61374b46a9ca" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_440010a805c8" d="M 334.6094055175781 376 L 353 376 L 353 344 A 4 4 0 0 1 357 340 L 370.6094055175781 340" p="d7c68fd60cd3" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b8b7f74947a3" d="M 334.6094055175781 376 L 353 376 L 353 376 L 370.6094055175781 376" p="d7c68fd60cd3" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ba403dd10c47" d="M 334.6094055175781 376 L 353 376 L 353 408 A 4 4 0 0 0 357 412 L 370.6094055175781 412" p="d7c68fd60cd3" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4f7c1f4db21d" d="M 249.00003051757812 466 L 268 466 L 268 466 L 284.6094055175781 466" p="61374b46a9ca" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0d6f09c9e8cf" d="M 334.6094055175781 466 L 353 466 L 353 452 A 4 4 0 0 1 357 448 L 370.6094055175781 448" p="4f7c1f4db21d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bd416679cc0f" d="M 334.6094055175781 466 L 353 466 L 353 480 A 4 4 0 0 0 357 484 L 370.6094055175781 484" p="4f7c1f4db21d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4239089edc83" d="M 249.00003051757812 466 L 268 466 L 268 534 A 4 4 0 0 0 272 538 L 284.6094055175781 538" p="61374b46a9ca" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7da8085408ad" d="M 336.6094055175781 538 L 355 538 L 355 524 A 4 4 0 0 1 359 520 L 372.1197814941406 520" p="4239089edc83" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6f3c98e049af" d="M 336.6094055175781 538 L 355 538 L 355 552 A 4 4 0 0 0 359 556 L 372.1197814941406 556" p="4239089edc83" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0455b7a1cf58" d="M 249.00003051757812 466 L 268 466 L 268 588 A 4 4 0 0 0 272 592 L 284.6094055175781 592" p="61374b46a9ca" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e914f33de40c" d="M 64 677 L 82 677 L 82 787 A 4 4 0 0 0 86 791 L 100.00003051757812 791" p="bba8e8ce3291" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_079843ca5913" d="M 168.00003051757812 791 L 187 791 L 187 632 A 4 4 0 0 1 191 628 L 204.00003051757812 628" p="e914f33de40c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4f5e3bd58e28" d="M 168.00003051757812 791 L 187 791 L 187 785 A 4 4 0 0 1 191 781 L 204.00003051757812 781" p="e914f33de40c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0515bbbecd54" d="M 254.00003051757812 781 L 273 781 L 273 668 A 4 4 0 0 1 277 664 L 290.0000305175781 664" p="4f5e3bd58e28" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a97806d4637f" d="M 254.00003051757812 781 L 273 781 L 273 722 A 4 4 0 0 1 277 718 L 290.0000305175781 718" p="4f5e3bd58e28" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8acaa587c90d" d="M 353.0000305175781 718 L 372 718 L 372 704 A 4 4 0 0 1 376 700 L 389.0416564941406 700" p="a97806d4637f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6295c839fa71" d="M 353.0000305175781 718 L 372 718 L 372 732 A 4 4 0 0 0 376 736 L 389.0416564941406 736" p="a97806d4637f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_82322ed679fe" d="M 254.00003051757812 781 L 273 781 L 273 831 A 4 4 0 0 0 277 835 L 290.0000305175781 835" p="4f5e3bd58e28" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dd7490dd38e4" d="M 353.0000305175781 835 L 372 835 L 372 776 A 4 4 0 0 1 376 772 L 389.0416564941406 772" p="82322ed679fe" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5ba03fc1eddd" d="M 353.0000305175781 835 L 372 835 L 372 821 A 4 4 0 0 1 376 817 L 389.0416564941406 817" p="82322ed679fe" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_69acd5553c4f" d="M 464.0416564941406 817 L 483 817 L 483 817 L 499.7604064941406 817" p="5ba03fc1eddd" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d41afeeaa233" d="M 353.0000305175781 835 L 372 835 L 372 877 A 4 4 0 0 0 376 881 L 389.0416564941406 881" p="82322ed679fe" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3b1c2f7a05e3" d="M 457.0416564941406 881 L 476 881 L 476 867 A 4 4 0 0 1 480 863 L 493.0416564941406 863" p="d41afeeaa233" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_796b43605c3f" d="M 457.0416564941406 881 L 476 881 L 476 895 A 4 4 0 0 0 480 899 L 493.0416564941406 899" p="d41afeeaa233" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_55fb087a7974" d="M 168.00003051757812 791 L 187 791 L 187 940 A 4 4 0 0 0 191 944 L 204.00003051757812 944" p="e914f33de40c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b919ffce802c" d="M 254.00003051757812 944 L 273 944 L 273 944 L 290.0000305175781 944" p="55fb087a7974" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_77aee507ed1e" d="M 64 677 L 82 677 L 82 986 A 4 4 0 0 0 86 990 L 100.00003051757812 990" p="bba8e8ce3291" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_03b93ac5eb17" d="M 168.00003051757812 990 L 187 990 L 187 990 L 204.00003051757812 990" p="77aee507ed1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_74928853dadb" d="M 64 677 L 82 677 L 82 1040 A 4 4 0 0 0 86 1044 L 100.00003051757812 1044" p="bba8e8ce3291" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f75a4c6f56b4" d="M 168.00003051757812 1044 L 187 1044 L 187 1030 A 4 4 0 0 1 191 1026 L 204.00003051757812 1026" p="74928853dadb" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_19f85017b2ce" d="M 168.00003051757812 1044 L 187 1044 L 187 1058 A 4 4 0 0 0 191 1062 L 204.00003051757812 1062" p="74928853dadb" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_39ae173e6e0e" d="M 64 677 L 82 677 L 82 1112 A 4 4 0 0 0 86 1116 L 100.00003051757812 1116" p="bba8e8ce3291" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f8a4eb19645b" d="M 168.00003051757812 1116 L 187 1116 L 187 1102 A 4 4 0 0 1 191 1098 L 204.00003051757812 1098" p="39ae173e6e0e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d2722707829b" d="M 168.00003051757812 1116 L 187 1116 L 187 1130 A 4 4 0 0 0 191 1134 L 204.00003051757812 1134" p="39ae173e6e0e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_22529a2a0880" d="M 64 677 L 82 677 L 82 1250 A 4 4 0 0 0 86 1254 L 100.00003051757812 1254" p="bba8e8ce3291" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f17bdd25d4ea" d="M 168.00003051757812 1254 L 187 1254 L 187 1212 A 4 4 0 0 1 191 1208 L 204.00003051757812 1208" p="22529a2a0880" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3e21918ed766" d="M 340.0000305175781 1208 L 359 1208 L 359 1208 L 375.5833435058594 1208" p="f17bdd25d4ea" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b4b8ed76f02d" d="M 168.00003051757812 1254 L 187 1254 L 187 1306 A 4 4 0 0 0 191 1310 L 204.00003051757812 1310" p="22529a2a0880" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3a403e78cf0c" d="M 356.0000305175781 1310 L 375 1310 L 375 1310 L 391.9635314941406 1310" p="b4b8ed76f02d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,-0.5)"></g><g class="svg-summary-con" transform="translate(0.5,-0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,-0.5)"></g></g><g transform="translate(229, 6179.000244140625)" id="sdjakdjak2"><g id="subline_af0d7a381dfa" transform="translate(0.5,-1.5)"><path id="line_5e6c8e6373cb" d="M 106 104 L 124 104 L 124 18 A 4 4 0 0 1 128 14 L 142.00003051757812 14" p="af0d7a381dfa" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ad0e71f431eb" d="M 193.00003051757812 14 L 212 14 L 212 14 L 228.85415649414062 14" p="5e6c8e6373cb" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_82dd6efab5b9" d="M 106 104 L 124 104 L 124 54 A 4 4 0 0 1 128 50 L 142.00003051757812 50" p="af0d7a381dfa" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4f62f4e0436c" d="M 193.00003051757812 50 L 212 50 L 212 50 L 229.23959350585938 50" p="82dd6efab5b9" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8901028fcfd5" d="M 106 104 L 124 104 L 124 90 A 4 4 0 0 1 128 86 L 142.00003051757812 86" p="af0d7a381dfa" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_09cde4d616c6" d="M 205.00003051757812 86 L 224 86 L 224 86 L 241.01040649414062 86" p="8901028fcfd5" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e043ef6885ce" d="M 106 104 L 124 104 L 124 118 A 4 4 0 0 0 128 122 L 142.00003051757812 122" p="af0d7a381dfa" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4eff7f22b489" d="M 192.00003051757812 122 L 211 122 L 211 122 L 228.00003051757812 122" p="e043ef6885ce" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1922d78fb88c" d="M 106 104 L 124 104 L 124 154 A 4 4 0 0 0 128 158 L 142.00003051757812 158" p="af0d7a381dfa" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_805f8af6bd5b" d="M 192.00003051757812 158 L 211 158 L 211 158 L 228.00003051757812 158" p="1922d78fb88c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_768710ea06f5" d="M 106 104 L 124 104 L 124 190 A 4 4 0 0 0 128 194 L 142.00003051757812 194" p="af0d7a381dfa" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_547960bc0721" d="M 201.00003051757812 194 L 220 194 L 220 194 L 237.29165649414062 194" p="768710ea06f5" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,-0.5)"></g><g class="svg-summary-con" transform="translate(0.5,-0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,-0.5)"></g></g><g transform="translate(229, 5850.000244140625)" id="sdjakdjak3"><g id="subline_8bbb96ca783f" transform="translate(0.5,-1.5)"><path id="line_35361f91a3bd" d="M 78 150 L 96 150 L 96 18 A 4 4 0 0 1 100 14 L 114.00003051757812 14" p="8bbb96ca783f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_174f07f57c86" d="M 164.00003051757812 14 L 183 14 L 183 14 L 200.00003051757812 14" p="35361f91a3bd" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_74e01f079574" d="M 288.0000305175781 14 L 307 14 L 307 14 L 323.6510314941406 14" p="174f07f57c86" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_921220b3224f" d="M 78 150 L 96 150 L 96 63 A 4 4 0 0 1 100 59 L 114.00003051757812 59" p="8bbb96ca783f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d35477a28eea" d="M 78 150 L 96 150 L 96 109 A 4 4 0 0 1 100 105 L 114.00003051757812 105" p="8bbb96ca783f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8a393f262959" d="M 182.00003051757812 105 L 201 105 L 201 105 L 218.00003051757812 105" p="d35477a28eea" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_195397a3c851" d="M 78 150 L 96 150 L 96 209 A 4 4 0 0 0 100 213 L 114.00003051757812 213" p="8bbb96ca783f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_46b980b1b3fc" d="M 182.00003051757812 213 L 201 213 L 201 145 A 4 4 0 0 1 205 141 L 218.00003051757812 141" p="195397a3c851" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4ae29fce91b6" d="M 370.0000305175781 141 L 389 141 L 389 141 L 406.0000305175781 141" p="46b980b1b3fc" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7a2bb4ef762f" d="M 182.00003051757812 213 L 201 213 L 201 181 A 4 4 0 0 1 205 177 L 218.00003051757812 177" p="195397a3c851" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b4a1862f74e7" d="M 182.00003051757812 213 L 201 213 L 201 213 L 218.00003051757812 213" p="195397a3c851" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b918b2b73c5d" d="M 182.00003051757812 213 L 201 213 L 201 263 A 4 4 0 0 0 205 267 L 218.00003051757812 267" p="195397a3c851" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e2a9f906d5a6" d="M 295.0000305175781 267 L 314 267 L 314 253 A 4 4 0 0 1 318 249 L 330.6562805175781 249" p="b918b2b73c5d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0d5f5d82428f" d="M 295.0000305175781 267 L 314 267 L 314 281 A 4 4 0 0 0 318 285 L 330.6562805175781 285" p="b918b2b73c5d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,-0.5)"></g><g class="svg-summary-con" transform="translate(0.5,-0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,-0.5)"></g></g><g transform="translate(229, 2255.0001220703125)" id="sdjakdjak4"><g id="subline_584940fa5469" transform="translate(0.5,-1.5)"><path id="line_c6b9929c995c" d="M 78 1783 L 96 1783 L 96 18 A 4 4 0 0 1 100 14 L 114.00003051757812 14" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4a30a6f2f589" d="M 78 1783 L 96 1783 L 96 180 A 4 4 0 0 1 100 176 L 114.00003051757812 176" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3bcd0cf52bb8" d="M 206.00003051757812 176 L 225 176 L 225 162 A 4 4 0 0 1 229 158 L 241.68228149414062 158" p="4a30a6f2f589" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_77583fff3ce0" d="M 309.6822814941406 158 L 328 158 L 328 54 A 4 4 0 0 1 332 50 L 345.6822814941406 50" p="3bcd0cf52bb8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6a82beb93c89" d="M 309.6822814941406 158 L 328 158 L 328 90 A 4 4 0 0 1 332 86 L 345.6822814941406 86" p="3bcd0cf52bb8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e86628089cf7" d="M 309.6822814941406 158 L 328 158 L 328 126 A 4 4 0 0 1 332 122 L 345.6822814941406 122" p="3bcd0cf52bb8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2697e2413f4b" d="M 309.6822814941406 158 L 328 158 L 328 158 L 345.6822814941406 158" p="3bcd0cf52bb8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d0e0f529de85" d="M 309.6822814941406 158 L 328 158 L 328 190 A 4 4 0 0 0 332 194 L 345.6822814941406 194" p="3bcd0cf52bb8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8c2ffec6accf" d="M 309.6822814941406 158 L 328 158 L 328 226 A 4 4 0 0 0 332 230 L 345.6822814941406 230" p="3bcd0cf52bb8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5f5b6685f6f7" d="M 309.6822814941406 158 L 328 158 L 328 262 A 4 4 0 0 0 332 266 L 345.6822814941406 266" p="3bcd0cf52bb8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_16991c8898b2" d="M 206.00003051757812 176 L 225 176 L 225 298 A 4 4 0 0 0 229 302 L 241.68228149414062 302" p="4a30a6f2f589" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b8d49c66e053" d="M 78 1783 L 96 1783 L 96 360 A 4 4 0 0 1 100 356 L 114.00003051757812 356" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0a45ffd9ad6d" d="M 242.00003051757812 356 L 261 356 L 261 342 A 4 4 0 0 1 265 338 L 278.0000305175781 338" p="b8d49c66e053" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fae44da24757" d="M 242.00003051757812 356 L 261 356 L 261 370 A 4 4 0 0 0 265 374 L 278.0000305175781 374" p="b8d49c66e053" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b1386599415a" d="M 78 1783 L 96 1783 L 96 414 A 4 4 0 0 1 100 410 L 114.00003051757812 410" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fb15904406f0" d="M 164.00003051757812 410 L 183 410 L 183 410 L 200.00003051757812 410" p="b1386599415a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dfbeba71b66e" d="M 78 1783 L 96 1783 L 96 487 A 4 4 0 0 1 100 483 L 114.00003051757812 483" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_69ff45388bf2" d="M 191.00003051757812 483 L 210 483 L 210 459 A 4 4 0 0 1 214 455 L 226.60940551757812 455" p="dfbeba71b66e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cb022a9c2260" d="M 191.00003051757812 483 L 210 483 L 210 506 A 4 4 0 0 0 214 510 L 226.60940551757812 510" p="dfbeba71b66e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_903cc285a548" d="M 78 1783 L 96 1783 L 96 651 A 4 4 0 0 1 100 647 L 114.00003051757812 647" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_46adb8f8810c" d="M 182.00003051757812 647 L 201 647 L 201 560 A 4 4 0 0 1 205 556 L 218.00003051757812 556" p="903cc285a548" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a60f0b188fdd" d="M 182.00003051757812 647 L 201 647 L 201 615 A 4 4 0 0 1 205 611 L 218.00003051757812 611" p="903cc285a548" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bf15fd17cf94" d="M 268.0000305175781 611 L 287 611 L 287 611 L 304.0000305175781 611" p="a60f0b188fdd" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_491b17a6d4b6" d="M 535.0000305175781 611 L 554 611 L 554 611 L 570.6459045410156 611" p="bf15fd17cf94" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_07a57112dc69" d="M 182.00003051757812 647 L 201 647 L 201 680 A 4 4 0 0 0 205 684 L 218.00003051757812 684" p="903cc285a548" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_51c9a599ea36" d="M 268.0000305175781 684 L 287 684 L 287 670 A 4 4 0 0 1 291 666 L 304.0000305175781 666" p="07a57112dc69" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dd4fb1af5ba2" d="M 268.0000305175781 684 L 287 684 L 287 698 A 4 4 0 0 0 291 702 L 304.0000305175781 702" p="07a57112dc69" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7a85dd2315bf" d="M 384.0000305175781 702 L 403 702 L 403 702 L 419.6822814941406 702" p="dd4fb1af5ba2" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4c54a97fbcab" d="M 182.00003051757812 647 L 201 647 L 201 734 A 4 4 0 0 0 205 738 L 218.00003051757812 738" p="903cc285a548" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a7ee4304226c" d="M 268.0000305175781 738 L 287 738 L 287 738 L 304.0000305175781 738" p="4c54a97fbcab" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9bbfd618c435" d="M 78 1783 L 96 1783 L 96 1151 A 4 4 0 0 1 100 1147 L 114.00003051757812 1147" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_18597d523193" d="M 164.00003051757812 1147 L 183 1147 L 183 887 A 4 4 0 0 1 187 883 L 200.00003051757812 883" p="9bbfd618c435" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_44544824be66" d="M 337.0000305175781 883 L 356 883 L 356 850 A 4 4 0 0 1 360 846 L 373.0416564941406 846" p="18597d523193" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_703acf56f2da" d="M 619.0416564941406 846 L 638 846 L 638 778 A 4 4 0 0 1 642 774 L 654.9635314941406 774" p="44544824be66" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7d8afb8c87e5" d="M 619.0416564941406 846 L 638 846 L 638 814 A 4 4 0 0 1 642 810 L 654.9635314941406 810" p="44544824be66" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4151604cfc1f" d="M 718.9635314941406 810 L 737 810 L 737 810 L 754.6354064941406 810" p="7d8afb8c87e5" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_afaa5468c949" d="M 619.0416564941406 846 L 638 846 L 638 846 L 654.9635314941406 846" p="44544824be66" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_624ee8ff386e" d="M 704.9635314941406 846 L 723 846 L 723 846 L 740.9635314941406 846" p="afaa5468c949" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c0d19545b74d" d="M 619.0416564941406 846 L 638 846 L 638 896 A 4 4 0 0 0 642 900 L 654.9635314941406 900" p="44544824be66" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9eda79d867f6" d="M 704.9635314941406 900 L 723 900 L 723 886 A 4 4 0 0 1 727 882 L 740.9635314941406 882" p="c0d19545b74d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c0fd61becb10" d="M 704.9635314941406 900 L 723 900 L 723 914 A 4 4 0 0 0 727 918 L 740.9635314941406 918" p="c0d19545b74d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2170f355c7c7" d="M 337.0000305175781 883 L 356 883 L 356 969 A 4 4 0 0 0 360 973 L 373.0416564941406 973" p="18597d523193" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a0af9e994415" d="M 617.0416564941406 973 L 636 973 L 636 973 L 652.9584045410156 973" p="2170f355c7c7" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0b046517a695" d="M 164.00003051757812 1147 L 183 1147 L 183 1059 A 4 4 0 0 1 187 1055 L 200.00003051757812 1055" p="9bbfd618c435" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5b7e7af6e22a" d="M 365.0000305175781 1055 L 384 1055 L 384 1041 A 4 4 0 0 1 388 1037 L 400.8229064941406 1037" p="0b046517a695" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_eebbd228dbdf" d="M 365.0000305175781 1055 L 384 1055 L 384 1079 A 4 4 0 0 0 388 1083 L 400.8229064941406 1083" p="0b046517a695" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2361957f72d2" d="M 630.8229064941406 1083 L 649 1083 L 649 1083 L 666.7135314941406 1083" p="eebbd228dbdf" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f3ebb892faad" d="M 164.00003051757812 1147 L 183 1147 L 183 1216 A 4 4 0 0 0 187 1220 L 200.00003051757812 1220" p="9bbfd618c435" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6694d7754c0f" d="M 351.0000305175781 1220 L 370 1220 L 370 1142 A 4 4 0 0 1 374 1138 L 387.0000305175781 1138" p="f3ebb892faad" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_30d171b20f30" d="M 351.0000305175781 1220 L 370 1220 L 370 1220 L 387.0000305175781 1220" p="f3ebb892faad" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3b007796fe3e" d="M 479.0000305175781 1220 L 498 1220 L 498 1220 L 515.0000305175781 1220" p="30d171b20f30" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_52b4f220e945" d="M 351.0000305175781 1220 L 370 1220 L 370 1282 A 4 4 0 0 0 374 1286 L 387.0000305175781 1286" p="f3ebb892faad" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2b4b19d0e448" d="M 446.0000305175781 1286 L 465 1286 L 465 1286 L 481.5156555175781 1286" p="52b4f220e945" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_28290e0d9639" d="M 351.0000305175781 1220 L 370 1220 L 370 1318 A 4 4 0 0 0 374 1322 L 387.0000305175781 1322" p="f3ebb892faad" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b31952c843ce" d="M 500.0000305175781 1322 L 519 1322 L 519 1322 L 535.5989685058594 1322" p="28290e0d9639" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d08ec6693c32" d="M 164.00003051757812 1147 L 183 1147 L 183 1372 A 4 4 0 0 0 187 1376 L 200.00003051757812 1376" p="9bbfd618c435" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4aa3e1f2f3c8" d="M 268.0000305175781 1376 L 287 1376 L 287 1362 A 4 4 0 0 1 291 1358 L 304.0000305175781 1358" p="d08ec6693c32" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_210959f41f1c" d="M 268.0000305175781 1376 L 287 1376 L 287 1390 A 4 4 0 0 0 291 1394 L 304.0000305175781 1394" p="d08ec6693c32" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6a59993c6924" d="M 164.00003051757812 1147 L 183 1147 L 183 1471 A 4 4 0 0 0 187 1475 L 200.00003051757812 1475" p="9bbfd618c435" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fe47e86e161d" d="M 304.0000305175781 1475 L 323 1475 L 323 1461 A 4 4 0 0 1 327 1457 L 340.0000305175781 1457" p="6a59993c6924" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_62c72d055d4a" d="M 570.0000305175781 1457 L 589 1457 L 589 1434 A 4 4 0 0 1 593 1430 L 605.5104064941406 1430" p="fe47e86e161d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_669131b53085" d="M 570.0000305175781 1457 L 589 1457 L 589 1471 A 4 4 0 0 0 593 1475 L 605.5104064941406 1475" p="fe47e86e161d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_65e15f617b35" d="M 304.0000305175781 1475 L 323 1475 L 323 1517 A 4 4 0 0 0 327 1521 L 340.0000305175781 1521" p="6a59993c6924" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_98b890d97ae5" d="M 532.0000305175781 1521 L 551 1521 L 551 1521 L 568.1615295410156 1521" p="65e15f617b35" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_15219cf3b5b1" d="M 78 1783 L 96 1783 L 96 1984 A 4 4 0 0 0 100 1988 L 114.00003051757812 1988" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e96cd08ab516" d="M 242.00003051757812 1988 L 261 1988 L 261 1742 A 4 4 0 0 1 265 1738 L 278.0000305175781 1738" p="15219cf3b5b1" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_53bffdd737f6" d="M 501.0000305175781 1738 L 520 1738 L 520 1561 A 4 4 0 0 1 524 1557 L 536.5885314941406 1557" p="e96cd08ab516" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0a8131742303" d="M 586.5885314941406 1557 L 605 1557 L 605 1557 L 622.9166564941406 1557" p="53bffdd737f6" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fbf5a8a85d64" d="M 501.0000305175781 1738 L 520 1738 L 520 1597 A 4 4 0 0 1 524 1593 L 536.5885314941406 1593" p="e96cd08ab516" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2ef1243a7eed" d="M 602.5885314941406 1593 L 621 1593 L 621 1593 L 638.6094055175781 1593" p="fbf5a8a85d64" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2695cfabcc90" d="M 501.0000305175781 1738 L 520 1738 L 520 1633 A 4 4 0 0 1 524 1629 L 536.5885314941406 1629" p="e96cd08ab516" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_850a567684f9" d="M 618.5885314941406 1629 L 637 1629 L 637 1629 L 654.7344055175781 1629" p="2695cfabcc90" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1a19ae81a1ae" d="M 501.0000305175781 1738 L 520 1738 L 520 1706 A 4 4 0 0 1 524 1702 L 536.5885314941406 1702" p="e96cd08ab516" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cf1c704756bb" d="M 628.5885314941406 1702 L 647 1702 L 647 1669 A 4 4 0 0 1 651 1665 L 664.9375305175781 1665" p="1a19ae81a1ae" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2eea915827e7" d="M 628.5885314941406 1702 L 647 1702 L 647 1716 A 4 4 0 0 0 651 1720 L 664.9375305175781 1720" p="1a19ae81a1ae" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a27156970586" d="M 501.0000305175781 1738 L 520 1738 L 520 1807 A 4 4 0 0 0 524 1811 L 536.5885314941406 1811" p="e96cd08ab516" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e402e46ff11f" d="M 586.5885314941406 1811 L 605 1811 L 605 1779 A 4 4 0 0 1 609 1775 L 622.5885314941406 1775" p="a27156970586" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ae5da69337c8" d="M 586.5885314941406 1811 L 605 1811 L 605 1825 A 4 4 0 0 0 609 1829 L 622.5885314941406 1829" p="a27156970586" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ed752b74a2c4" d="M 672.5885314941406 1829 L 691 1829 L 691 1815 A 4 4 0 0 1 695 1811 L 708.5885314941406 1811" p="ae5da69337c8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0bf7ebb4e017" d="M 672.5885314941406 1829 L 691 1829 L 691 1843 A 4 4 0 0 0 695 1847 L 708.5885314941406 1847" p="ae5da69337c8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_342b5e78edcc" d="M 501.0000305175781 1738 L 520 1738 L 520 1897 A 4 4 0 0 0 524 1901 L 536.5885314941406 1901" p="e96cd08ab516" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8b8451c915cb" d="M 586.5885314941406 1901 L 605 1901 L 605 1887 A 4 4 0 0 1 609 1883 L 622.5885314941406 1883" p="342b5e78edcc" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d76755ae18f4" d="M 586.5885314941406 1901 L 605 1901 L 605 1915 A 4 4 0 0 0 609 1919 L 622.5885314941406 1919" p="342b5e78edcc" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_54b959951aa2" d="M 672.5885314941406 1919 L 691 1919 L 691 1919 L 708.5885314941406 1919" p="d76755ae18f4" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e75251f38cd1" d="M 242.00003051757812 1988 L 261 1988 L 261 1977 A 4 4 0 0 1 265 1973 L 278.0000305175781 1973" p="15219cf3b5b1" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c6a75a33b99d" d="M 406.0000305175781 1973 L 425 1973 L 425 1959 A 4 4 0 0 1 429 1955 L 442.0000305175781 1955" p="e75251f38cd1" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_01e86969bee5" d="M 582.0000305175781 1955 L 601 1955 L 601 1955 L 618.0000305175781 1955" p="c6a75a33b99d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_31ef4471ed89" d="M 406.0000305175781 1973 L 425 1973 L 425 1987 A 4 4 0 0 0 429 1991 L 442.0000305175781 1991" p="e75251f38cd1" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0a5c36c6016b" d="M 570.0000305175781 1991 L 589 1991 L 589 1991 L 606.0000305175781 1991" p="31ef4471ed89" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c1cbac594951" d="M 242.00003051757812 1988 L 261 1988 L 261 2023 A 4 4 0 0 0 265 2027 L 278.0000305175781 2027" p="15219cf3b5b1" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a3e33a110b37" d="M 370.0000305175781 2027 L 389 2027 L 389 2027 L 406.0000305175781 2027" p="c1cbac594951" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_731cb2fbe20d" d="M 242.00003051757812 1988 L 261 1988 L 261 2135 A 4 4 0 0 0 265 2139 L 278.0000305175781 2139" p="15219cf3b5b1" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_81bf8676b743" d="M 370.0000305175781 2139 L 389 2139 L 389 2139 L 406.0000305175781 2139" p="731cb2fbe20d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d4afe1b4995f" d="M 242.00003051757812 1988 L 261 1988 L 261 2331 A 4 4 0 0 0 265 2335 L 278.0000305175781 2335" p="15219cf3b5b1" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ff22c0822189" d="M 334.0000305175781 2335 L 353 2335 L 353 2274 A 4 4 0 0 1 357 2270 L 370.0000305175781 2270" p="d4afe1b4995f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b14b8969bf79" d="M 425.0000305175781 2270 L 444 2270 L 444 2270 L 460.8177185058594 2270" p="ff22c0822189" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_766ca9da3164" d="M 334.0000305175781 2335 L 353 2335 L 353 2368 A 4 4 0 0 0 357 2372 L 370.0000305175781 2372" p="d4afe1b4995f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a986cf0f7aa3" d="M 423.0000305175781 2372 L 442 2372 L 442 2372 L 458.6979064941406 2372" p="766ca9da3164" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_132efdc46733" d="M 78 1783 L 96 1783 L 96 2542 A 4 4 0 0 0 100 2546 L 114.00003051757812 2546" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f187141e3f87" d="M 182.00003051757812 2546 L 201 2546 L 201 2460 A 4 4 0 0 1 205 2456 L 218.00003051757812 2456" p="132efdc46733" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_024516b9c746" d="M 416.0000305175781 2456 L 435 2456 L 435 2456 L 451.5572814941406 2456" p="f187141e3f87" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8ac8ae001783" d="M 182.00003051757812 2546 L 201 2546 L 201 2514 A 4 4 0 0 1 205 2510 L 218.00003051757812 2510" p="132efdc46733" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_113b31aba7aa" d="M 333.0000305175781 2510 L 352 2510 L 352 2496 A 4 4 0 0 1 356 2492 L 369.0416564941406 2492" p="8ac8ae001783" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d81d9437b27b" d="M 333.0000305175781 2510 L 352 2510 L 352 2524 A 4 4 0 0 0 356 2528 L 369.0416564941406 2528" p="8ac8ae001783" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_85d2814a302b" d="M 182.00003051757812 2546 L 201 2546 L 201 2596 A 4 4 0 0 0 205 2600 L 218.00003051757812 2600" p="132efdc46733" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d53e94eddda1" d="M 346.0000305175781 2600 L 365 2600 L 365 2568 A 4 4 0 0 1 369 2564 L 381.9219055175781 2564" p="85d2814a302b" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ad9aef304ff3" d="M 346.0000305175781 2600 L 365 2600 L 365 2600 L 381.9219055175781 2600" p="85d2814a302b" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bbdbd06c517f" d="M 346.0000305175781 2600 L 365 2600 L 365 2632 A 4 4 0 0 0 369 2636 L 381.9219055175781 2636" p="85d2814a302b" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e0b0cad16b1e" d="M 78 1783 L 96 1783 L 96 3107 A 4 4 0 0 0 100 3111 L 114.00003051757812 3111" p="584940fa5469" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_eb581cb2f9d8" d="M 185.00003051757812 3111 L 204 3111 L 204 2676 A 4 4 0 0 1 208 2672 L 220.95315551757812 2672" p="e0b0cad16b1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_980bfd349845" d="M 185.00003051757812 3111 L 204 3111 L 204 2769 A 4 4 0 0 1 208 2765 L 220.95315551757812 2765" p="e0b0cad16b1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4469c324d606" d="M 288.9531555175781 2765 L 307 2765 L 307 2765 L 324.9531555175781 2765" p="980bfd349845" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ca4db60ae1b3" d="M 185.00003051757812 3111 L 204 3111 L 204 2956 A 4 4 0 0 1 208 2952 L 220.95315551757812 2952" p="e0b0cad16b1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d875157297a2" d="M 288.9531555175781 2952 L 307 2952 L 307 2938 A 4 4 0 0 1 311 2934 L 324.9531555175781 2934" p="ca4db60ae1b3" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b79df5824381" d="M 288.9531555175781 2952 L 307 2952 L 307 3042 A 4 4 0 0 0 311 3046 L 324.9531555175781 3046" p="ca4db60ae1b3" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_10405e6ad8cc" d="M 464.9531555175781 3046 L 483 3046 L 483 3046 L 500.9531555175781 3046" p="b79df5824381" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a18d0216e1a3" d="M 185.00003051757812 3111 L 204 3111 L 204 3172 A 4 4 0 0 0 208 3176 L 220.95315551757812 3176" p="e0b0cad16b1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6ab85b0ba999" d="M 270.9531555175781 3176 L 289 3176 L 289 3162 A 4 4 0 0 1 293 3158 L 306.9531555175781 3158" p="a18d0216e1a3" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_82137af4d8f3" d="M 270.9531555175781 3176 L 289 3176 L 289 3266 A 4 4 0 0 0 293 3270 L 306.9531555175781 3270" p="a18d0216e1a3" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0c7dccc0c2eb" d="M 185.00003051757812 3111 L 204 3111 L 204 3424 A 4 4 0 0 0 208 3428 L 220.95315551757812 3428" p="e0b0cad16b1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b0b52594b2e3" d="M 270.9531555175781 3428 L 289 3428 L 289 3310 A 4 4 0 0 1 293 3306 L 306.9531555175781 3306" p="0c7dccc0c2eb" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e1b411a0e3e4" d="M 270.9531555175781 3428 L 289 3428 L 289 3442 A 4 4 0 0 0 293 3446 L 306.9531555175781 3446" p="0c7dccc0c2eb" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_62a0d32eae27" d="M 722.9531555175781 3446 L 741 3446 L 741 3446 L 759.3906555175781 3446" p="e1b411a0e3e4" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,-0.5)"></g><g class="svg-summary-con" transform="translate(0.5,-0.5)"><path id="sum_ce706ce2fef2" fill="none" stroke="#bf1e1b" stroke-width="1" d=" M 436 40 C 453 44 428 153 450 158 M 436 276 C 453 272 428 163 450 158" stroke-linecap="round"></path></g><g class="svg-boundary-con" transform="translate(0.5,-0.5)"></g></g><g transform="translate(229, 921)" id="sdjakdjak5"><g id="subline_6761a98f1b35" transform="translate(0.5,-1.5)"><path id="line_0a4926c45808" d="M 52 652 L 70 652 L 70 46 A 4 4 0 0 1 74 42 L 88.00003051757812 42" p="6761a98f1b35" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ddbf4cc3ca9c" d="M 52 652 L 70 652 L 70 157 A 4 4 0 0 1 74 153 L 88.00003051757812 153" p="6761a98f1b35" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2679d7f2fff9" d="M 156.00003051757812 153 L 175 153 L 175 139 A 4 4 0 0 1 179 135 L 192.00003051757812 135" p="ddbf4cc3ca9c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b6a4e6150866" d="M 248.00003051757812 135 L 267 135 L 267 135 L 284.0000305175781 135" p="2679d7f2fff9" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_09718c1f05f8" d="M 156.00003051757812 153 L 175 153 L 175 196 A 4 4 0 0 0 179 200 L 192.00003051757812 200" p="ddbf4cc3ca9c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_304d067d9cd8" d="M 242.00003051757812 200 L 261 200 L 261 200 L 278.0000305175781 200" p="09718c1f05f8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d9a53383ea13" d="M 52 652 L 70 652 L 70 331 A 4 4 0 0 1 74 327 L 88.00003051757812 327" p="6761a98f1b35" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ba0cb6d10910" d="M 138.00003051757812 327 L 157 327 L 157 240 A 4 4 0 0 1 161 236 L 174.00003051757812 236" p="d9a53383ea13" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_12ce5c66cd4b" d="M 230.00003051757812 236 L 249 236 L 249 236 L 266.0000305175781 236" p="ba0cb6d10910" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d4e306811c24" d="M 138.00003051757812 327 L 157 327 L 157 276 A 4 4 0 0 1 161 272 L 174.00003051757812 272" p="d9a53383ea13" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_27392c7d65ab" d="M 230.00003051757812 272 L 249 272 L 249 272 L 266.0000305175781 272" p="d4e306811c24" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_70e2320bd270" d="M 138.00003051757812 327 L 157 327 L 157 327 L 174.00003051757812 327" p="d9a53383ea13" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c9f550bb6058" d="M 278.0000305175781 327 L 297 327 L 297 327 L 314.0000305175781 327" p="70e2320bd270" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6808b167efb8" d="M 138.00003051757812 327 L 157 327 L 157 378 A 4 4 0 0 0 161 382 L 174.00003051757812 382" p="d9a53383ea13" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1d168a233e4f" d="M 242.00003051757812 382 L 261 382 L 261 382 L 278.0000305175781 382" p="6808b167efb8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dfc620558fb8" d="M 138.00003051757812 327 L 157 327 L 157 414 A 4 4 0 0 0 161 418 L 174.00003051757812 418" p="d9a53383ea13" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7383d1fc8bd3" d="M 290.0000305175781 418 L 309 418 L 309 418 L 326.0000305175781 418" p="dfc620558fb8" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_476fb0308ca7" d="M 52 652 L 70 652 L 70 548 A 4 4 0 0 1 74 544 L 88.00003051757812 544" p="6761a98f1b35" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e96ac7b37cb1" d="M 170.00003051757812 544 L 189 544 L 189 458 A 4 4 0 0 1 193 454 L 205.76040649414062 454" p="476fb0308ca7" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bc0742e1f02f" d="M 170.00003051757812 544 L 189 544 L 189 494 A 4 4 0 0 1 193 490 L 205.76040649414062 490" p="476fb0308ca7" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b7175db026e5" d="M 261.7604064941406 490 L 280 490 L 280 490 L 297.7604064941406 490" p="bc0742e1f02f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7b9b5e4b546b" d="M 170.00003051757812 544 L 189 544 L 189 576 A 4 4 0 0 0 193 580 L 205.76040649414062 580" p="476fb0308ca7" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_80e1f70f5a9d" d="M 255.76040649414062 580 L 274 580 L 274 530 A 4 4 0 0 1 278 526 L 291.7604064941406 526" p="7b9b5e4b546b" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2a79190aea8f" d="M 348.7604064941406 526 L 367 526 L 367 526 L 384.6927185058594 526" p="80e1f70f5a9d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a38965256d4a" d="M 255.76040649414062 580 L 274 580 L 274 594 A 4 4 0 0 0 278 598 L 291.7604064941406 598" p="7b9b5e4b546b" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1b43a66da430" d="M 344.7604064941406 598 L 363 598 L 363 566 A 4 4 0 0 1 367 562 L 380.4166564941406 562" p="a38965256d4a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_80744a2396e0" d="M 344.7604064941406 598 L 363 598 L 363 598 L 380.4166564941406 598" p="a38965256d4a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_79a9a6fa79c5" d="M 344.7604064941406 598 L 363 598 L 363 630 A 4 4 0 0 0 367 634 L 380.4166564941406 634" p="a38965256d4a" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_768f22adefeb" d="M 52 652 L 70 652 L 70 693 A 4 4 0 0 0 74 697 L 88.00003051757812 697" p="6761a98f1b35" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0b8da430d88a" d="M 138.00003051757812 697 L 157 697 L 157 674 A 4 4 0 0 1 161 670 L 174.00003051757812 670" p="768f22adefeb" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_00a18d4990ba" d="M 138.00003051757812 697 L 157 697 L 157 711 A 4 4 0 0 0 161 715 L 174.00003051757812 715" p="768f22adefeb" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2994fc514243" d="M 52 652 L 70 652 L 70 784 A 4 4 0 0 0 74 788 L 88.00003051757812 788" p="6761a98f1b35" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fb5a10850e60" d="M 156.00003051757812 788 L 175 788 L 175 765 A 4 4 0 0 1 179 761 L 192.00003051757812 761" p="2994fc514243" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_af78f3bd07fe" d="M 156.00003051757812 788 L 175 788 L 175 802 A 4 4 0 0 0 179 806 L 192.00003051757812 806" p="2994fc514243" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3ff1e91f6030" d="M 52 652 L 70 652 L 70 902 A 4 4 0 0 0 74 906 L 88.00003051757812 906" p="6761a98f1b35" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a2960d7e837d" d="M 183.00003051757812 906 L 202 906 L 202 874 A 4 4 0 0 1 206 870 L 218.59896850585938 870" p="3ff1e91f6030" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1d99df1bef81" d="M 334.5989685058594 870 L 353 870 L 353 856 A 4 4 0 0 1 357 852 L 370.2812805175781 852" p="a2960d7e837d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bdea8622b0a3" d="M 334.5989685058594 870 L 353 870 L 353 884 A 4 4 0 0 0 357 888 L 370.2812805175781 888" p="a2960d7e837d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_edf41307fed5" d="M 183.00003051757812 906 L 202 906 L 202 920 A 4 4 0 0 0 206 924 L 218.59896850585938 924" p="3ff1e91f6030" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9c5a6f6ee20c" d="M 286.5989685058594 924 L 305 924 L 305 924 L 322.5989685058594 924" p="edf41307fed5" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f5af432b86e4" d="M 183.00003051757812 906 L 202 906 L 202 956 A 4 4 0 0 0 206 960 L 218.59896850585938 960" p="3ff1e91f6030" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_60d3b258a17e" d="M 286.5989685058594 960 L 305 960 L 305 960 L 322.5989685058594 960" p="f5af432b86e4" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2a4867780ce2" d="M 52 652 L 70 652 L 70 1139 A 4 4 0 0 0 74 1143 L 88.00003051757812 1143" p="6761a98f1b35" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ef0dc6d67b52" d="M 138.00003051757812 1143 L 157 1143 L 157 1000 A 4 4 0 0 1 161 996 L 174.00003051757812 996" p="2a4867780ce2" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_64874ffe7cd7" d="M 138.00003051757812 1143 L 157 1143 L 157 1036 A 4 4 0 0 1 161 1032 L 174.00003051757812 1032" p="2a4867780ce2" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6d7ea9aaad35" d="M 224.00003051757812 1032 L 243 1032 L 243 1032 L 260.0000305175781 1032" p="64874ffe7cd7" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2cc2737dff1e" d="M 138.00003051757812 1143 L 157 1143 L 157 1175 A 4 4 0 0 0 161 1179 L 174.00003051757812 1179" p="2a4867780ce2" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1c822df2d0a4" d="M 224.00003051757812 1179 L 243 1179 L 243 1072 A 4 4 0 0 1 247 1068 L 260.0000305175781 1068" p="2cc2737dff1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1a7687e3edcb" d="M 224.00003051757812 1179 L 243 1179 L 243 1108 A 4 4 0 0 1 247 1104 L 260.0000305175781 1104" p="2cc2737dff1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_70a43e6c9771" d="M 224.00003051757812 1179 L 243 1179 L 243 1144 A 4 4 0 0 1 247 1140 L 260.0000305175781 1140" p="2cc2737dff1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d9b0a9c6174d" d="M 224.00003051757812 1179 L 243 1179 L 243 1229 A 4 4 0 0 0 247 1233 L 260.0000305175781 1233" p="2cc2737dff1e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1d7f3f96841c" d="M 359.0000305175781 1233 L 378 1233 L 378 1233 L 395.0416564941406 1233" p="d9b0a9c6174d" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1bf48a090f90" d="M 549.0416564941406 1233 L 568 1233 L 568 1209 A 4 4 0 0 1 572 1205 L 584.6354064941406 1205" p="1d7f3f96841c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_db60ec6e5742" d="M 549.0416564941406 1233 L 568 1233 L 568 1256 A 4 4 0 0 0 572 1260 L 584.6354064941406 1260" p="1d7f3f96841c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,-0.5)"></g><g class="svg-summary-con" transform="translate(0.5,-0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,-0.5)"></g></g><g transform="translate(229, 827)" id="sdjakdjak6"><g id="subline_fd3958d01ca2" transform="translate(0.5,-1.5)"><path id="line_e396d96dccf4" d="M 102 32 L 120 32 L 120 18 A 4 4 0 0 1 124 14 L 138.31771850585938 14" p="fd3958d01ca2" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_18892908a7c1" d="M 102 32 L 120 32 L 120 46 A 4 4 0 0 0 124 50 L 138.31771850585938 50" p="fd3958d01ca2" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,-0.5)"></g><g class="svg-summary-con" transform="translate(0.5,-0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,-0.5)"></g></g><g transform="translate(229, 30)" id="sdjakdjak7"><g id="subline_eb0b8aeaad60" transform="translate(0.5,-1.5)"><path id="line_7886936dad38" d="M 78 384 L 96 384 L 96 54 A 4 4 0 0 1 100 50 L 114.00003051757812 50" p="eb0b8aeaad60" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2be77cb38052" d="M 306.0000305175781 50 L 325 50 L 325 18 A 4 4 0 0 1 329 14 L 342.2864685058594 14" p="7886936dad38" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2a0a881af032" d="M 306.0000305175781 50 L 325 50 L 325 64 A 4 4 0 0 0 329 68 L 342.2864685058594 68" p="7886936dad38" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_414c556586f6" d="M 398.2864685058594 68 L 417 68 L 417 54 A 4 4 0 0 1 421 50 L 434.2864685058594 50" p="2a0a881af032" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b83102335416" d="M 398.2864685058594 68 L 417 68 L 417 82 A 4 4 0 0 0 421 86 L 434.2864685058594 86" p="2a0a881af032" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a79826b23fff" d="M 78 384 L 96 384 L 96 180 A 4 4 0 0 1 100 176 L 114.00003051757812 176" p="eb0b8aeaad60" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d4cc786fe3e0" d="M 170.00003051757812 176 L 189 176 L 189 126 A 4 4 0 0 1 193 122 L 206.00003051757812 122" p="a79826b23fff" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_11130bb15d1c" d="M 170.00003051757812 176 L 189 176 L 189 176 L 206.00003051757812 176" p="a79826b23fff" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2e252d9e31ec" d="M 262.0000305175781 176 L 281 176 L 281 162 A 4 4 0 0 1 285 158 L 298.0000305175781 158" p="11130bb15d1c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f114f0f03238" d="M 262.0000305175781 176 L 281 176 L 281 190 A 4 4 0 0 0 285 194 L 298.0000305175781 194" p="11130bb15d1c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_99026425f38b" d="M 170.00003051757812 176 L 189 176 L 189 226 A 4 4 0 0 0 193 230 L 206.00003051757812 230" p="a79826b23fff" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fefd1fb3b3c1" d="M 256.0000305175781 230 L 275 230 L 275 230 L 292.0000305175781 230" p="99026425f38b" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1f52f01674f7" d="M 78 384 L 96 384 L 96 369 A 4 4 0 0 1 100 365 L 114.00003051757812 365" p="eb0b8aeaad60" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_092ec94f7882" d="M 182.00003051757812 365 L 201 365 L 201 270 A 4 4 0 0 1 205 266 L 218.00003051757812 266" p="1f52f01674f7" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a53d6550077e" d="M 182.00003051757812 365 L 201 365 L 201 365 L 218.00003051757812 365" p="1f52f01674f7" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b6c4a5152886" d="M 286.0000305175781 365 L 305 365 L 305 315 A 4 4 0 0 1 309 311 L 322.0000305175781 311" p="a53d6550077e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_09c0d7a2f035" d="M 286.0000305175781 365 L 305 365 L 305 389 A 4 4 0 0 0 309 393 L 322.0000305175781 393" p="a53d6550077e" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5b4a8b8ed2b8" d="M 372.0000305175781 393 L 391 393 L 391 361 A 4 4 0 0 1 395 357 L 408.0000305175781 357" p="09c0d7a2f035" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b7a9db4387e1" d="M 372.0000305175781 393 L 391 393 L 391 393 L 408.0000305175781 393" p="09c0d7a2f035" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9ddd706bd68f" d="M 372.0000305175781 393 L 391 393 L 391 425 A 4 4 0 0 0 395 429 L 408.0000305175781 429" p="09c0d7a2f035" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_87e10c3090a1" d="M 182.00003051757812 365 L 201 365 L 201 461 A 4 4 0 0 0 205 465 L 218.00003051757812 465" p="1f52f01674f7" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d51ef0acb6b5" d="M 268.0000305175781 465 L 287 465 L 287 465 L 304.0000305175781 465" p="87e10c3090a1" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9c36d4c2f39f" d="M 78 384 L 96 384 L 96 623 A 4 4 0 0 0 100 627 L 114.00003051757812 627" p="eb0b8aeaad60" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bea9a6665b0b" d="M 182.00003051757812 627 L 201 627 L 201 505 A 4 4 0 0 1 205 501 L 218.00003051757812 501" p="9c36d4c2f39f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_74c2fb0d357f" d="M 345.0000305175781 501 L 364 501 L 364 501 L 380.6614685058594 501" p="bea9a6665b0b" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b97b1162b71c" d="M 182.00003051757812 627 L 201 627 L 201 559 A 4 4 0 0 1 205 555 L 218.00003051757812 555" p="9c36d4c2f39f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b949c5072450" d="M 417.0000305175781 555 L 436 555 L 436 541 A 4 4 0 0 1 440 537 L 453.0520935058594 537" p="b97b1162b71c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c4d9828b19c5" d="M 417.0000305175781 555 L 436 555 L 436 569 A 4 4 0 0 0 440 573 L 453.0520935058594 573" p="b97b1162b71c" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ed534fc55398" d="M 182.00003051757812 627 L 201 627 L 201 627 L 218.00003051757812 627" p="9c36d4c2f39f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a31620073f25" d="M 330.0000305175781 627 L 349 627 L 349 613 A 4 4 0 0 1 353 609 L 366.2135314941406 609" p="ed534fc55398" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dcac08eff2a6" d="M 330.0000305175781 627 L 349 627 L 349 641 A 4 4 0 0 0 353 645 L 366.2135314941406 645" p="ed534fc55398" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9dc27d8e65a6" d="M 182.00003051757812 627 L 201 627 L 201 713 A 4 4 0 0 0 205 717 L 218.00003051757812 717" p="9c36d4c2f39f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a59667c5cfdc" d="M 299.0000305175781 717 L 318 717 L 318 685 A 4 4 0 0 1 322 681 L 334.6250305175781 681" p="9dc27d8e65a6" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_994220ad648f" d="M 299.0000305175781 717 L 318 717 L 318 731 A 4 4 0 0 0 322 735 L 334.6250305175781 735" p="9dc27d8e65a6" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6f82d19ec6bf" d="M 384.6250305175781 735 L 403 735 L 403 721 A 4 4 0 0 1 407 717 L 420.6250305175781 717" p="994220ad648f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cab4e4777575" d="M 384.6250305175781 735 L 403 735 L 403 749 A 4 4 0 0 0 407 753 L 420.6250305175781 753" p="994220ad648f" stroke="#43a9ff" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,-0.5)"></g><g class="svg-summary-con" transform="translate(0.5,-0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,-0.5)"></g></g><g transform="translate(30, 4225.000183105469)" id="sdjakdjak8"><g id="subline_root" transform="translate(0.5,-1.5)"></g><g transform="translate(0.5,-0.5)"></g><g class="svg-summary-con" transform="translate(0.5,-0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,-0.5)"></g></g><g id="root"><rect x="30" y="4225.000183105469" rx="5px" ry="5px" width="119" height="60" style="fill: #50C28B; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-family="微软雅黑" font-size="26px" font-weight="normal" fill="rgb(255, 255, 255)"><tspan x="42" y="4259.600183105469"><tspan>JSCORE</tspan></tspan></text></g></g></svg>